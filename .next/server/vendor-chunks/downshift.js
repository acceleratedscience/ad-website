"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/downshift";
exports.ids = ["vendor-chunks/downshift"];
exports.modules = {

/***/ "(ssr)/./node_modules/downshift/dist/downshift.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/downshift/dist/downshift.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Downshift$1),\n/* harmony export */   resetIdCounter: () => (/* binding */ resetIdCounter),\n/* harmony export */   useCombobox: () => (/* binding */ useCombobox),\n/* harmony export */   useMultipleSelection: () => (/* binding */ useMultipleSelection),\n/* harmony export */   useSelect: () => (/* binding */ useSelect)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-is */ \"(ssr)/./node_modules/react-is/index.js\");\n/* harmony import */ var compute_scroll_into_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! compute-scroll-into-view */ \"(ssr)/./node_modules/compute-scroll-into-view/dist/index.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\n\n\n\n\n\n\n\n\nvar idCounter = 0;\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */ function cbToCb(cb) {\n    return typeof cb === \"function\" ? cb : noop;\n}\nfunction noop() {}\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */ function scrollIntoView(node, menuNode) {\n    if (!node) {\n        return;\n    }\n    var actions = (0,compute_scroll_into_view__WEBPACK_IMPORTED_MODULE_6__.compute)(node, {\n        boundary: menuNode,\n        block: \"nearest\",\n        scrollMode: \"if-needed\"\n    });\n    actions.forEach(function(_ref) {\n        var el = _ref.el, top = _ref.top, left = _ref.left;\n        el.scrollTop = top;\n        el.scrollLeft = left;\n    });\n}\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @param {Window} environment The window context where downshift renders.\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */ function isOrContainsNode(parent, child, environment) {\n    var result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);\n    return result;\n}\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */ function debounce(fn, time) {\n    var timeoutId;\n    function cancel() {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n    }\n    function wrapper() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        cancel();\n        timeoutId = setTimeout(function() {\n            timeoutId = null;\n            fn.apply(void 0, args);\n        }, time);\n    }\n    wrapper.cancel = cancel;\n    return wrapper;\n}\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */ function callAllEventHandlers() {\n    for(var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n        fns[_key2] = arguments[_key2];\n    }\n    return function(event) {\n        for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++){\n            args[_key3 - 1] = arguments[_key3];\n        }\n        return fns.some(function(fn) {\n            if (fn) {\n                fn.apply(void 0, [\n                    event\n                ].concat(args));\n            }\n            return event.preventDownshiftDefault || event.hasOwnProperty(\"nativeEvent\") && event.nativeEvent.preventDownshiftDefault;\n        });\n    };\n}\nfunction handleRefs() {\n    for(var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n        refs[_key4] = arguments[_key4];\n    }\n    return function(node) {\n        refs.forEach(function(ref) {\n            if (typeof ref === \"function\") {\n                ref(node);\n            } else if (ref) {\n                ref.current = node;\n            }\n        });\n    };\n}\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */ function generateId() {\n    return String(idCounter++);\n}\n/**\n * Resets idCounter to 0. Used for SSR.\n */ function resetIdCounter() {\n    // istanbul ignore next\n    if (\"useId\" in (react__WEBPACK_IMPORTED_MODULE_4___default())) {\n        console.warn(\"It is not necessary to call resetIdCounter when using React 18+\");\n        return;\n    }\n    idCounter = 0;\n}\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specify if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */ function getA11yStatusMessage$1(_ref2) {\n    var isOpen = _ref2.isOpen, resultCount = _ref2.resultCount, previousResultCount = _ref2.previousResultCount;\n    if (!isOpen) {\n        return \"\";\n    }\n    if (!resultCount) {\n        return \"No results are available.\";\n    }\n    if (resultCount !== previousResultCount) {\n        return resultCount + \" result\" + (resultCount === 1 ? \" is\" : \"s are\") + \" available, use up and down arrow keys to navigate. Press Enter key to select.\";\n    }\n    return \"\";\n}\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */ function unwrapArray(arg, defaultValue) {\n    arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg;\n    if (!arg && defaultValue) {\n        return defaultValue;\n    } else {\n        return arg;\n    }\n}\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */ function isDOMElement(element) {\n    // then we assume this is react\n    return typeof element.type === \"string\";\n}\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */ function getElementProps(element) {\n    return element.props;\n}\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */ function requiredProp(fnName, propName) {\n    // eslint-disable-next-line no-console\n    console.error('The property \"' + propName + '\" is required in \"' + fnName + '\"');\n}\nvar stateKeys = [\n    \"highlightedIndex\",\n    \"inputValue\",\n    \"isOpen\",\n    \"selectedItem\",\n    \"type\"\n];\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */ function pickState(state) {\n    if (state === void 0) {\n        state = {};\n    }\n    var result = {};\n    stateKeys.forEach(function(k) {\n        if (state.hasOwnProperty(k)) {\n            result[k] = state[k];\n        }\n    });\n    return result;\n}\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */ function getState(state, props) {\n    return Object.keys(state).reduce(function(prevState, key) {\n        prevState[key] = isControlledProp(props, key) ? props[key] : state[key];\n        return prevState;\n    }, {});\n}\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */ function isControlledProp(props, key) {\n    return props[key] !== undefined;\n}\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */ function normalizeArrowKey(event) {\n    var key = event.key, keyCode = event.keyCode;\n    /* istanbul ignore next (ie) */ if (keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0) {\n        return \"Arrow\" + key;\n    }\n    return key;\n}\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */ function isPlainObject(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Object]\";\n}\n/**\n * Returns the next non-disabled highlightedIndex value.\n *\n * @param {number} start The current highlightedIndex.\n * @param {number} offset The offset from the current highlightedIndex to start searching.\n * @param {unknown[]} items The items array.\n * @param {(item: unknown, index: number) => boolean} isItemDisabled Function that tells if an item is disabled or not.\n * @param {boolean?} circular If the search reaches the end, if it can search again starting from the other end.\n * @returns {number} The next highlightedIndex.\n */ function getHighlightedIndex(start, offset, items, isItemDisabled, circular) {\n    if (circular === void 0) {\n        circular = false;\n    }\n    var count = items.length;\n    if (count === 0) {\n        return -1;\n    }\n    var itemsLastIndex = count - 1;\n    if (typeof start !== \"number\" || start < 0 || start > itemsLastIndex) {\n        start = offset > 0 ? -1 : itemsLastIndex + 1;\n    }\n    var current = start + offset;\n    if (current < 0) {\n        current = circular ? itemsLastIndex : 0;\n    } else if (current > itemsLastIndex) {\n        current = circular ? 0 : itemsLastIndex;\n    }\n    var highlightedIndex = getNonDisabledIndex(current, offset < 0, items, isItemDisabled, circular);\n    if (highlightedIndex === -1) {\n        return start >= count ? -1 : start;\n    }\n    return highlightedIndex;\n}\n/**\n * Returns the next non-disabled highlightedIndex value.\n *\n * @param {number} start The current highlightedIndex.\n * @param {boolean} backwards If true, it will search backwards from the start.\n * @param {unknown[]} items The items array.\n * @param {(item: unknown, index: number) => boolean} isItemDisabled Function that tells if an item is disabled or not.\n * @param {boolean} circular If the search reaches the end, if it can search again starting from the other end.\n * @returns {number} The next non-disabled index.\n */ function getNonDisabledIndex(start, backwards, items, isItemDisabled, circular) {\n    if (circular === void 0) {\n        circular = false;\n    }\n    var count = items.length;\n    if (backwards) {\n        for(var index = start; index >= 0; index--){\n            if (!isItemDisabled(items[index], index)) {\n                return index;\n            }\n        }\n    } else {\n        for(var _index = start; _index < count; _index++){\n            if (!isItemDisabled(items[_index], _index)) {\n                return _index;\n            }\n        }\n    }\n    if (circular) {\n        return getNonDisabledIndex(backwards ? count - 1 : 0, backwards, items, isItemDisabled);\n    }\n    return -1;\n}\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Window} environment The window context where downshift renders.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */ function targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {\n    if (checkActiveElement === void 0) {\n        checkActiveElement = true;\n    }\n    return environment && downshiftElements.some(function(contextNode) {\n        return contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment));\n    });\n}\n// eslint-disable-next-line import/no-mutable-exports\nvar validateControlledUnchanged = noop;\n/* istanbul ignore next */ if (true) {\n    validateControlledUnchanged = function validateControlledUnchanged(state, prevProps, nextProps) {\n        var warningDescription = \"This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props\";\n        Object.keys(state).forEach(function(propKey) {\n            if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {\n                // eslint-disable-next-line no-console\n                console.error('downshift: A component has changed the controlled prop \"' + propKey + '\" to be uncontrolled. ' + warningDescription);\n            } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {\n                // eslint-disable-next-line no-console\n                console.error('downshift: A component has changed the uncontrolled prop \"' + propKey + '\" to be controlled. ' + warningDescription);\n            }\n        });\n    };\n}\nvar cleanupStatus = debounce(function(documentProp) {\n    getStatusDiv(documentProp).textContent = \"\";\n}, 500);\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */ function getStatusDiv(documentProp) {\n    var statusDiv = documentProp.getElementById(\"a11y-status-message\");\n    if (statusDiv) {\n        return statusDiv;\n    }\n    statusDiv = documentProp.createElement(\"div\");\n    statusDiv.setAttribute(\"id\", \"a11y-status-message\");\n    statusDiv.setAttribute(\"role\", \"status\");\n    statusDiv.setAttribute(\"aria-live\", \"polite\");\n    statusDiv.setAttribute(\"aria-relevant\", \"additions text\");\n    Object.assign(statusDiv.style, {\n        border: \"0\",\n        clip: \"rect(0 0 0 0)\",\n        height: \"1px\",\n        margin: \"-1px\",\n        overflow: \"hidden\",\n        padding: \"0\",\n        position: \"absolute\",\n        width: \"1px\"\n    });\n    documentProp.body.appendChild(statusDiv);\n    return statusDiv;\n}\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */ function setStatus(status, documentProp) {\n    if (!status || !documentProp) {\n        return;\n    }\n    var div = getStatusDiv(documentProp);\n    div.textContent = status;\n    cleanupStatus(documentProp);\n}\nvar unknown =  true ? \"__autocomplete_unknown__\" : 0;\nvar mouseUp =  true ? \"__autocomplete_mouseup__\" : 0;\nvar itemMouseEnter =  true ? \"__autocomplete_item_mouseenter__\" : 0;\nvar keyDownArrowUp =  true ? \"__autocomplete_keydown_arrow_up__\" : 0;\nvar keyDownArrowDown =  true ? \"__autocomplete_keydown_arrow_down__\" : 0;\nvar keyDownEscape =  true ? \"__autocomplete_keydown_escape__\" : 0;\nvar keyDownEnter =  true ? \"__autocomplete_keydown_enter__\" : 0;\nvar keyDownHome =  true ? \"__autocomplete_keydown_home__\" : 0;\nvar keyDownEnd =  true ? \"__autocomplete_keydown_end__\" : 0;\nvar clickItem =  true ? \"__autocomplete_click_item__\" : 0;\nvar blurInput =  true ? \"__autocomplete_blur_input__\" : 0;\nvar changeInput =  true ? \"__autocomplete_change_input__\" : 0;\nvar keyDownSpaceButton =  true ? \"__autocomplete_keydown_space_button__\" : 0;\nvar clickButton =  true ? \"__autocomplete_click_button__\" : 0;\nvar blurButton =  true ? \"__autocomplete_blur_button__\" : 0;\nvar controlledPropUpdatedSelectedItem =  true ? \"__autocomplete_controlled_prop_updated_selected_item__\" : 0;\nvar touchEnd =  true ? \"__autocomplete_touchend__\" : 0;\nvar stateChangeTypes$3 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    unknown: unknown,\n    mouseUp: mouseUp,\n    itemMouseEnter: itemMouseEnter,\n    keyDownArrowUp: keyDownArrowUp,\n    keyDownArrowDown: keyDownArrowDown,\n    keyDownEscape: keyDownEscape,\n    keyDownEnter: keyDownEnter,\n    keyDownHome: keyDownHome,\n    keyDownEnd: keyDownEnd,\n    clickItem: clickItem,\n    blurInput: blurInput,\n    changeInput: changeInput,\n    keyDownSpaceButton: keyDownSpaceButton,\n    clickButton: clickButton,\n    blurButton: blurButton,\n    controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,\n    touchEnd: touchEnd\n});\nvar _excluded$4 = [\n    \"refKey\",\n    \"ref\"\n], _excluded2$3 = [\n    \"onClick\",\n    \"onPress\",\n    \"onKeyDown\",\n    \"onKeyUp\",\n    \"onBlur\"\n], _excluded3$2 = [\n    \"onKeyDown\",\n    \"onBlur\",\n    \"onChange\",\n    \"onInput\",\n    \"onChangeText\"\n], _excluded4$1 = [\n    \"refKey\",\n    \"ref\"\n], _excluded5 = [\n    \"onMouseMove\",\n    \"onMouseDown\",\n    \"onClick\",\n    \"onPress\",\n    \"index\",\n    \"item\"\n];\nvar Downshift = /*#__PURE__*/ function() {\n    var Downshift = /*#__PURE__*/ function(_Component) {\n        (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Downshift, _Component);\n        function Downshift(_props) {\n            var _this;\n            _this = _Component.call(this, _props) || this;\n            // fancy destructuring + defaults + aliases\n            // this basically says each value of state should either be set to\n            // the initial value or the default value if the initial value is not provided\n            _this.id = _this.props.id || \"downshift-\" + generateId();\n            _this.menuId = _this.props.menuId || _this.id + \"-menu\";\n            _this.labelId = _this.props.labelId || _this.id + \"-label\";\n            _this.inputId = _this.props.inputId || _this.id + \"-input\";\n            _this.getItemId = _this.props.getItemId || function(index) {\n                return _this.id + \"-item-\" + index;\n            };\n            _this.items = [];\n            // itemCount can be changed asynchronously\n            // from within downshift (so it can't come from a prop)\n            // this is why we store it as an instance and use\n            // getItemCount rather than just use items.length\n            // (to support windowing + async)\n            _this.itemCount = null;\n            _this.previousResultCount = 0;\n            _this.timeoutIds = [];\n            /**\n       * @param {Function} fn the function to call after the time\n       * @param {Number} time the time to wait\n       */ _this.internalSetTimeout = function(fn, time) {\n                var id = setTimeout(function() {\n                    _this.timeoutIds = _this.timeoutIds.filter(function(i) {\n                        return i !== id;\n                    });\n                    fn();\n                }, time);\n                _this.timeoutIds.push(id);\n            };\n            _this.setItemCount = function(count) {\n                _this.itemCount = count;\n            };\n            _this.unsetItemCount = function() {\n                _this.itemCount = null;\n            };\n            _this.isItemDisabled = function(_item, index) {\n                var currentElementNode = _this.getItemNodeFromIndex(index);\n                return currentElementNode && currentElementNode.hasAttribute(\"disabled\");\n            };\n            _this.setHighlightedIndex = function(highlightedIndex, otherStateToSet) {\n                if (highlightedIndex === void 0) {\n                    highlightedIndex = _this.props.defaultHighlightedIndex;\n                }\n                if (otherStateToSet === void 0) {\n                    otherStateToSet = {};\n                }\n                otherStateToSet = pickState(otherStateToSet);\n                _this.internalSetState((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    highlightedIndex: highlightedIndex\n                }, otherStateToSet));\n            };\n            _this.clearSelection = function(cb) {\n                _this.internalSetState({\n                    selectedItem: null,\n                    inputValue: \"\",\n                    highlightedIndex: _this.props.defaultHighlightedIndex,\n                    isOpen: _this.props.defaultIsOpen\n                }, cb);\n            };\n            _this.selectItem = function(item, otherStateToSet, cb) {\n                otherStateToSet = pickState(otherStateToSet);\n                _this.internalSetState((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    isOpen: _this.props.defaultIsOpen,\n                    highlightedIndex: _this.props.defaultHighlightedIndex,\n                    selectedItem: item,\n                    inputValue: _this.props.itemToString(item)\n                }, otherStateToSet), cb);\n            };\n            _this.selectItemAtIndex = function(itemIndex, otherStateToSet, cb) {\n                var item = _this.items[itemIndex];\n                if (item == null) {\n                    return;\n                }\n                _this.selectItem(item, otherStateToSet, cb);\n            };\n            _this.selectHighlightedItem = function(otherStateToSet, cb) {\n                return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);\n            };\n            // any piece of our state can live in two places:\n            // 1. Uncontrolled: it's internal (this.state)\n            //    We will call this.setState to update that state\n            // 2. Controlled: it's external (this.props)\n            //    We will call this.props.onStateChange to update that state\n            //\n            // In addition, we'll call this.props.onChange if the\n            // selectedItem is changed.\n            _this.internalSetState = function(stateToSet, cb) {\n                var isItemSelected, onChangeArg;\n                var onStateChangeArg = {};\n                var isStateToSetFunction = typeof stateToSet === \"function\";\n                // we want to call `onInputValueChange` before the `setState` call\n                // so someone controlling the `inputValue` state gets notified of\n                // the input change as soon as possible. This avoids issues with\n                // preserving the cursor position.\n                // See https://github.com/downshift-js/downshift/issues/217 for more info.\n                if (!isStateToSetFunction && stateToSet.hasOwnProperty(\"inputValue\")) {\n                    _this.props.onInputValueChange(stateToSet.inputValue, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, _this.getStateAndHelpers(), stateToSet));\n                }\n                return _this.setState(function(state) {\n                    var _newStateToSet;\n                    state = _this.getState(state);\n                    var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet;\n                    // Your own function that could modify the state that will be set.\n                    newStateToSet = _this.props.stateReducer(state, newStateToSet);\n                    // checks if an item is selected, regardless of if it's different from\n                    // what was selected before\n                    // used to determine if onSelect and onChange callbacks should be called\n                    isItemSelected = newStateToSet.hasOwnProperty(\"selectedItem\");\n                    // this keeps track of the object we want to call with setState\n                    var nextState = {};\n                    // we need to call on change if the outside world is controlling any of our state\n                    // and we're trying to update that state. OR if the selection has changed and we're\n                    // trying to update the selection\n                    if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {\n                        onChangeArg = newStateToSet.selectedItem;\n                    }\n                    (_newStateToSet = newStateToSet).type || (_newStateToSet.type = unknown);\n                    Object.keys(newStateToSet).forEach(function(key) {\n                        // onStateChangeArg should only have the state that is\n                        // actually changing\n                        if (state[key] !== newStateToSet[key]) {\n                            onStateChangeArg[key] = newStateToSet[key];\n                        }\n                        // the type is useful for the onStateChangeArg\n                        // but we don't actually want to set it in internal state.\n                        // this is an undocumented feature for now... Not all internalSetState\n                        // calls support it and I'm not certain we want them to yet.\n                        // But it enables users controlling the isOpen state to know when\n                        // the isOpen state changes due to mouseup events which is quite handy.\n                        if (key === \"type\") {\n                            return;\n                        }\n                        newStateToSet[key];\n                        // if it's coming from props, then we don't care to set it internally\n                        if (!isControlledProp(_this.props, key)) {\n                            nextState[key] = newStateToSet[key];\n                        }\n                    });\n                    // if stateToSet is a function, then we weren't able to call onInputValueChange\n                    // earlier, so we'll call it now that we know what the inputValue state will be.\n                    if (isStateToSetFunction && newStateToSet.hasOwnProperty(\"inputValue\")) {\n                        _this.props.onInputValueChange(newStateToSet.inputValue, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, _this.getStateAndHelpers(), newStateToSet));\n                    }\n                    return nextState;\n                }, function() {\n                    // call the provided callback if it's a function\n                    cbToCb(cb)();\n                    // only call the onStateChange and onChange callbacks if\n                    // we have relevant information to pass them.\n                    var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;\n                    if (hasMoreStateThanType) {\n                        _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());\n                    }\n                    if (isItemSelected) {\n                        _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());\n                    }\n                    if (onChangeArg !== undefined) {\n                        _this.props.onChange(onChangeArg, _this.getStateAndHelpers());\n                    }\n                    // this is currently undocumented and therefore subject to change\n                    // We'll try to not break it, but just be warned.\n                    _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());\n                });\n            };\n            //////////////////////////// ROOT\n            _this.rootRef = function(node) {\n                return _this._rootNode = node;\n            };\n            _this.getRootProps = function(_temp, _temp2) {\n                var _extends2;\n                var _ref = _temp === void 0 ? {} : _temp, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? \"ref\" : _ref$refKey, ref = _ref.ref, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref, _excluded$4);\n                var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n                // this is used in the render to know whether the user has called getRootProps.\n                // It uses that to know whether to apply the props automatically\n                _this.getRootProps.called = true;\n                _this.getRootProps.refKey = refKey;\n                _this.getRootProps.suppressRefError = suppressRefError;\n                var _this$getState = _this.getState(), isOpen = _this$getState.isOpen;\n                return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends2 = {}, _extends2[refKey] = handleRefs(ref, _this.rootRef), _extends2.role = \"combobox\", _extends2[\"aria-expanded\"] = isOpen, _extends2[\"aria-haspopup\"] = \"listbox\", _extends2[\"aria-owns\"] = isOpen ? _this.menuId : undefined, _extends2[\"aria-labelledby\"] = _this.labelId, _extends2), rest);\n            };\n            //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n            _this.keyDownHandlers = {\n                ArrowDown: function ArrowDown(event) {\n                    var _this2 = this;\n                    event.preventDefault();\n                    if (this.getState().isOpen) {\n                        var amount = event.shiftKey ? 5 : 1;\n                        this.moveHighlightedIndex(amount, {\n                            type: keyDownArrowDown\n                        });\n                    } else {\n                        this.internalSetState({\n                            isOpen: true,\n                            type: keyDownArrowDown\n                        }, function() {\n                            var itemCount = _this2.getItemCount();\n                            if (itemCount > 0) {\n                                var _this2$getState = _this2.getState(), highlightedIndex = _this2$getState.highlightedIndex;\n                                var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, 1, {\n                                    length: itemCount\n                                }, _this2.isItemDisabled, true);\n                                _this2.setHighlightedIndex(nextHighlightedIndex, {\n                                    type: keyDownArrowDown\n                                });\n                            }\n                        });\n                    }\n                },\n                ArrowUp: function ArrowUp(event) {\n                    var _this3 = this;\n                    event.preventDefault();\n                    if (this.getState().isOpen) {\n                        var amount = event.shiftKey ? -5 : -1;\n                        this.moveHighlightedIndex(amount, {\n                            type: keyDownArrowUp\n                        });\n                    } else {\n                        this.internalSetState({\n                            isOpen: true,\n                            type: keyDownArrowUp\n                        }, function() {\n                            var itemCount = _this3.getItemCount();\n                            if (itemCount > 0) {\n                                var _this3$getState = _this3.getState(), highlightedIndex = _this3$getState.highlightedIndex;\n                                var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, -1, {\n                                    length: itemCount\n                                }, _this3.isItemDisabled, true);\n                                _this3.setHighlightedIndex(nextHighlightedIndex, {\n                                    type: keyDownArrowUp\n                                });\n                            }\n                        });\n                    }\n                },\n                Enter: function Enter(event) {\n                    if (event.which === 229) {\n                        return;\n                    }\n                    var _this$getState2 = this.getState(), isOpen = _this$getState2.isOpen, highlightedIndex = _this$getState2.highlightedIndex;\n                    if (isOpen && highlightedIndex != null) {\n                        event.preventDefault();\n                        var item = this.items[highlightedIndex];\n                        var itemNode = this.getItemNodeFromIndex(highlightedIndex);\n                        if (item == null || itemNode && itemNode.hasAttribute(\"disabled\")) {\n                            return;\n                        }\n                        this.selectHighlightedItem({\n                            type: keyDownEnter\n                        });\n                    }\n                },\n                Escape: function Escape(event) {\n                    event.preventDefault();\n                    this.reset((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                        type: keyDownEscape\n                    }, !this.state.isOpen && {\n                        selectedItem: null,\n                        inputValue: \"\"\n                    }));\n                }\n            };\n            //////////////////////////// BUTTON\n            _this.buttonKeyDownHandlers = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, _this.keyDownHandlers, {\n                \" \": function _(event) {\n                    event.preventDefault();\n                    this.toggleMenu({\n                        type: keyDownSpaceButton\n                    });\n                }\n            });\n            _this.inputKeyDownHandlers = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, _this.keyDownHandlers, {\n                Home: function Home(event) {\n                    var _this$getState3 = this.getState(), isOpen = _this$getState3.isOpen;\n                    if (!isOpen) {\n                        return;\n                    }\n                    event.preventDefault();\n                    var itemCount = this.getItemCount();\n                    if (itemCount <= 0 || !isOpen) {\n                        return;\n                    }\n                    // get next non-disabled starting downwards from 0 if that's disabled.\n                    var newHighlightedIndex = getNonDisabledIndex(0, false, {\n                        length: itemCount\n                    }, this.isItemDisabled);\n                    this.setHighlightedIndex(newHighlightedIndex, {\n                        type: keyDownHome\n                    });\n                },\n                End: function End(event) {\n                    var _this$getState4 = this.getState(), isOpen = _this$getState4.isOpen;\n                    if (!isOpen) {\n                        return;\n                    }\n                    event.preventDefault();\n                    var itemCount = this.getItemCount();\n                    if (itemCount <= 0 || !isOpen) {\n                        return;\n                    }\n                    // get next non-disabled starting upwards from last index if that's disabled.\n                    var newHighlightedIndex = getNonDisabledIndex(itemCount - 1, true, {\n                        length: itemCount\n                    }, this.isItemDisabled);\n                    this.setHighlightedIndex(newHighlightedIndex, {\n                        type: keyDownEnd\n                    });\n                }\n            });\n            _this.getToggleButtonProps = function(_temp3) {\n                var _ref3 = _temp3 === void 0 ? {} : _temp3, onClick = _ref3.onClick;\n                _ref3.onPress;\n                var onKeyDown = _ref3.onKeyDown, onKeyUp = _ref3.onKeyUp, onBlur = _ref3.onBlur, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref3, _excluded2$3);\n                var _this$getState5 = _this.getState(), isOpen = _this$getState5.isOpen;\n                var enabledEventHandlers = {\n                    onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),\n                    onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),\n                    onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),\n                    onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)\n                };\n                var eventHandlers = rest.disabled ? {} : enabledEventHandlers;\n                return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    type: \"button\",\n                    role: \"button\",\n                    \"aria-label\": isOpen ? \"close menu\" : \"open menu\",\n                    \"aria-haspopup\": true,\n                    \"data-toggle\": true\n                }, eventHandlers, rest);\n            };\n            _this.buttonHandleKeyUp = function(event) {\n                // Prevent click event from emitting in Firefox\n                event.preventDefault();\n            };\n            _this.buttonHandleKeyDown = function(event) {\n                var key = normalizeArrowKey(event);\n                if (_this.buttonKeyDownHandlers[key]) {\n                    _this.buttonKeyDownHandlers[key].call((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), event);\n                }\n            };\n            _this.buttonHandleClick = function(event) {\n                event.preventDefault();\n                // handle odd case for Safari and Firefox which\n                // don't give the button the focus properly.\n                /* istanbul ignore if (can't reasonably test this) */ if (_this.props.environment) {\n                    var _this$props$environme = _this.props.environment.document, body = _this$props$environme.body, activeElement = _this$props$environme.activeElement;\n                    if (body && body === activeElement) {\n                        event.target.focus();\n                    }\n                }\n                // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n                // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n                // when building for production and should therefore have no impact on production code.\n                if (false) {} else {\n                    // Ensure that toggle of menu occurs after the potential blur event in iOS\n                    _this.internalSetTimeout(function() {\n                        return _this.toggleMenu({\n                            type: clickButton\n                        });\n                    });\n                }\n            };\n            _this.buttonHandleBlur = function(event) {\n                var blurTarget = event.target; // Save blur target for comparison with activeElement later\n                // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n                _this.internalSetTimeout(function() {\n                    if (_this.isMouseDown || !_this.props.environment) {\n                        return;\n                    }\n                    var activeElement = _this.props.environment.document.activeElement;\n                    if ((activeElement == null || activeElement.id !== _this.inputId) && activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n                    ) {\n                        _this.reset({\n                            type: blurButton\n                        });\n                    }\n                });\n            };\n            //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n            /////////////////////////////// LABEL\n            _this.getLabelProps = function(props) {\n                return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    htmlFor: _this.inputId,\n                    id: _this.labelId\n                }, props);\n            };\n            //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n            /////////////////////////////// INPUT\n            _this.getInputProps = function(_temp4) {\n                var _ref4 = _temp4 === void 0 ? {} : _temp4, onKeyDown = _ref4.onKeyDown, onBlur = _ref4.onBlur, onChange = _ref4.onChange, onInput = _ref4.onInput;\n                _ref4.onChangeText;\n                var rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref4, _excluded3$2);\n                var onChangeKey;\n                var eventHandlers = {};\n                /* istanbul ignore next (preact) */ {\n                    onChangeKey = \"onChange\";\n                }\n                var _this$getState6 = _this.getState(), inputValue = _this$getState6.inputValue, isOpen = _this$getState6.isOpen, highlightedIndex = _this$getState6.highlightedIndex;\n                if (!rest.disabled) {\n                    var _eventHandlers;\n                    eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.inputHandleBlur), _eventHandlers);\n                }\n                return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    \"aria-autocomplete\": \"list\",\n                    \"aria-activedescendant\": isOpen && typeof highlightedIndex === \"number\" && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : undefined,\n                    \"aria-controls\": isOpen ? _this.menuId : undefined,\n                    \"aria-labelledby\": rest && rest[\"aria-label\"] ? undefined : _this.labelId,\n                    // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n                    // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n                    autoComplete: \"off\",\n                    value: inputValue,\n                    id: _this.inputId\n                }, eventHandlers, rest);\n            };\n            _this.inputHandleKeyDown = function(event) {\n                var key = normalizeArrowKey(event);\n                if (key && _this.inputKeyDownHandlers[key]) {\n                    _this.inputKeyDownHandlers[key].call((0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), event);\n                }\n            };\n            _this.inputHandleChange = function(event) {\n                _this.internalSetState({\n                    type: changeInput,\n                    isOpen: true,\n                    inputValue: event.target.value,\n                    highlightedIndex: _this.props.defaultHighlightedIndex\n                });\n            };\n            _this.inputHandleBlur = function() {\n                // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n                _this.internalSetTimeout(function() {\n                    var _activeElement$datase;\n                    if (_this.isMouseDown || !_this.props.environment) {\n                        return;\n                    }\n                    var activeElement = _this.props.environment.document.activeElement;\n                    var downshiftButtonIsActive = (activeElement == null || (_activeElement$datase = activeElement.dataset) == null ? void 0 : _activeElement$datase.toggle) && _this._rootNode && _this._rootNode.contains(activeElement);\n                    if (!downshiftButtonIsActive) {\n                        _this.reset({\n                            type: blurInput\n                        });\n                    }\n                });\n            };\n            //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n            /////////////////////////////// MENU\n            _this.menuRef = function(node) {\n                _this._menuNode = node;\n            };\n            _this.getMenuProps = function(_temp5, _temp6) {\n                var _extends3;\n                var _ref5 = _temp5 === void 0 ? {} : _temp5, _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? \"ref\" : _ref5$refKey, ref = _ref5.ref, props = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref5, _excluded4$1);\n                var _ref6 = _temp6 === void 0 ? {} : _temp6, _ref6$suppressRefErro = _ref6.suppressRefError, suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;\n                _this.getMenuProps.called = true;\n                _this.getMenuProps.refKey = refKey;\n                _this.getMenuProps.suppressRefError = suppressRefError;\n                return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends3 = {}, _extends3[refKey] = handleRefs(ref, _this.menuRef), _extends3.role = \"listbox\", _extends3[\"aria-labelledby\"] = props && props[\"aria-label\"] ? undefined : _this.labelId, _extends3.id = _this.menuId, _extends3), props);\n            };\n            //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n            /////////////////////////////// ITEM\n            _this.getItemProps = function(_temp7) {\n                var _enabledEventHandlers;\n                var _ref7 = _temp7 === void 0 ? {} : _temp7, onMouseMove = _ref7.onMouseMove, onMouseDown = _ref7.onMouseDown, onClick = _ref7.onClick;\n                _ref7.onPress;\n                var index = _ref7.index, _ref7$item = _ref7.item, item = _ref7$item === void 0 ?  false ? /* istanbul ignore next */ 0 : requiredProp(\"getItemProps\", \"item\") : _ref7$item, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref7, _excluded5);\n                if (index === undefined) {\n                    _this.items.push(item);\n                    index = _this.items.indexOf(item);\n                } else {\n                    _this.items[index] = item;\n                }\n                var onSelectKey = \"onClick\";\n                var customClickHandler = onClick;\n                var enabledEventHandlers = (_enabledEventHandlers = {\n                    // onMouseMove is used over onMouseEnter here. onMouseMove\n                    // is only triggered on actual mouse movement while onMouseEnter\n                    // can fire on DOM changes, interrupting keyboard navigation\n                    onMouseMove: callAllEventHandlers(onMouseMove, function() {\n                        if (index === _this.getState().highlightedIndex) {\n                            return;\n                        }\n                        _this.setHighlightedIndex(index, {\n                            type: itemMouseEnter\n                        });\n                        // We never want to manually scroll when changing state based\n                        // on `onMouseMove` because we will be moving the element out\n                        // from under the user which is currently scrolling/moving the\n                        // cursor\n                        _this.avoidScrolling = true;\n                        _this.internalSetTimeout(function() {\n                            return _this.avoidScrolling = false;\n                        }, 250);\n                    }),\n                    onMouseDown: callAllEventHandlers(onMouseDown, function(event) {\n                        // This prevents the activeElement from being changed\n                        // to the item so it can remain with the current activeElement\n                        // which is a more common use case.\n                        event.preventDefault();\n                    })\n                }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function() {\n                    _this.selectItemAtIndex(index, {\n                        type: clickItem\n                    });\n                }), _enabledEventHandlers);\n                // Passing down the onMouseDown handler to prevent redirect\n                // of the activeElement if clicking on disabled items\n                var eventHandlers = rest.disabled ? {\n                    onMouseDown: enabledEventHandlers.onMouseDown\n                } : enabledEventHandlers;\n                return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    id: _this.getItemId(index),\n                    role: \"option\",\n                    \"aria-selected\": _this.getState().highlightedIndex === index\n                }, eventHandlers, rest);\n            };\n            //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n            _this.clearItems = function() {\n                _this.items = [];\n            };\n            _this.reset = function(otherStateToSet, cb) {\n                if (otherStateToSet === void 0) {\n                    otherStateToSet = {};\n                }\n                otherStateToSet = pickState(otherStateToSet);\n                _this.internalSetState(function(_ref8) {\n                    var selectedItem = _ref8.selectedItem;\n                    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                        isOpen: _this.props.defaultIsOpen,\n                        highlightedIndex: _this.props.defaultHighlightedIndex,\n                        inputValue: _this.props.itemToString(selectedItem)\n                    }, otherStateToSet);\n                }, cb);\n            };\n            _this.toggleMenu = function(otherStateToSet, cb) {\n                if (otherStateToSet === void 0) {\n                    otherStateToSet = {};\n                }\n                otherStateToSet = pickState(otherStateToSet);\n                _this.internalSetState(function(_ref9) {\n                    var isOpen = _ref9.isOpen;\n                    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                        isOpen: !isOpen\n                    }, isOpen && {\n                        highlightedIndex: _this.props.defaultHighlightedIndex\n                    }, otherStateToSet);\n                }, function() {\n                    var _this$getState7 = _this.getState(), isOpen = _this$getState7.isOpen, highlightedIndex = _this$getState7.highlightedIndex;\n                    if (isOpen) {\n                        if (_this.getItemCount() > 0 && typeof highlightedIndex === \"number\") {\n                            _this.setHighlightedIndex(highlightedIndex, otherStateToSet);\n                        }\n                    }\n                    cbToCb(cb)();\n                });\n            };\n            _this.openMenu = function(cb) {\n                _this.internalSetState({\n                    isOpen: true\n                }, cb);\n            };\n            _this.closeMenu = function(cb) {\n                _this.internalSetState({\n                    isOpen: false\n                }, cb);\n            };\n            _this.updateStatus = debounce(function() {\n                var _this$props;\n                if (!((_this$props = _this.props) != null && (_this$props = _this$props.environment) != null && _this$props.document)) {\n                    return;\n                }\n                var state = _this.getState();\n                var item = _this.items[state.highlightedIndex];\n                var resultCount = _this.getItemCount();\n                var status = _this.props.getA11yStatusMessage((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    itemToString: _this.props.itemToString,\n                    previousResultCount: _this.previousResultCount,\n                    resultCount: resultCount,\n                    highlightedItem: item\n                }, state));\n                _this.previousResultCount = resultCount;\n                setStatus(status, _this.props.environment.document);\n            }, 200);\n            var _this$props2 = _this.props, defaultHighlightedIndex = _this$props2.defaultHighlightedIndex, _this$props2$initialH = _this$props2.initialHighlightedIndex, _highlightedIndex = _this$props2$initialH === void 0 ? defaultHighlightedIndex : _this$props2$initialH, defaultIsOpen = _this$props2.defaultIsOpen, _this$props2$initialI = _this$props2.initialIsOpen, _isOpen = _this$props2$initialI === void 0 ? defaultIsOpen : _this$props2$initialI, _this$props2$initialI2 = _this$props2.initialInputValue, _inputValue = _this$props2$initialI2 === void 0 ? \"\" : _this$props2$initialI2, _this$props2$initialS = _this$props2.initialSelectedItem, _selectedItem = _this$props2$initialS === void 0 ? null : _this$props2$initialS;\n            var _state = _this.getState({\n                highlightedIndex: _highlightedIndex,\n                isOpen: _isOpen,\n                inputValue: _inputValue,\n                selectedItem: _selectedItem\n            });\n            if (_state.selectedItem != null && _this.props.initialInputValue === undefined) {\n                _state.inputValue = _this.props.itemToString(_state.selectedItem);\n            }\n            _this.state = _state;\n            return _this;\n        }\n        var _proto = Downshift.prototype;\n        /**\n     * Clear all running timeouts\n     */ _proto.internalClearTimeouts = function internalClearTimeouts() {\n            this.timeoutIds.forEach(function(id) {\n                clearTimeout(id);\n            });\n            this.timeoutIds = [];\n        } /**\n     * Gets the state based on internal state or props\n     * If a state value is passed via props, then that\n     * is the value given, otherwise it's retrieved from\n     * stateToMerge\n     *\n     * @param {Object} stateToMerge defaults to this.state\n     * @return {Object} the state\n     */ ;\n        _proto.getState = function getState$1(stateToMerge) {\n            if (stateToMerge === void 0) {\n                stateToMerge = this.state;\n            }\n            return getState(stateToMerge, this.props);\n        };\n        _proto.getItemCount = function getItemCount() {\n            // things read better this way. They're in priority order:\n            // 1. `this.itemCount`\n            // 2. `this.props.itemCount`\n            // 3. `this.items.length`\n            var itemCount = this.items.length;\n            if (this.itemCount != null) {\n                itemCount = this.itemCount;\n            } else if (this.props.itemCount !== undefined) {\n                itemCount = this.props.itemCount;\n            }\n            return itemCount;\n        };\n        _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {\n            return this.props.environment ? this.props.environment.document.getElementById(this.getItemId(index)) : null;\n        };\n        _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {\n            /* istanbul ignore else (react-native) */ {\n                var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);\n                this.props.scrollIntoView(node, this._menuNode);\n            }\n        };\n        _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {\n            var itemCount = this.getItemCount();\n            var _this$getState8 = this.getState(), highlightedIndex = _this$getState8.highlightedIndex;\n            if (itemCount > 0) {\n                var nextHighlightedIndex = getHighlightedIndex(highlightedIndex, amount, {\n                    length: itemCount\n                }, this.isItemDisabled, true);\n                this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);\n            }\n        };\n        _proto.getStateAndHelpers = function getStateAndHelpers() {\n            var _this$getState9 = this.getState(), highlightedIndex = _this$getState9.highlightedIndex, inputValue = _this$getState9.inputValue, selectedItem = _this$getState9.selectedItem, isOpen = _this$getState9.isOpen;\n            var itemToString = this.props.itemToString;\n            var id = this.id;\n            var getRootProps = this.getRootProps, getToggleButtonProps = this.getToggleButtonProps, getLabelProps = this.getLabelProps, getMenuProps = this.getMenuProps, getInputProps = this.getInputProps, getItemProps = this.getItemProps, openMenu = this.openMenu, closeMenu = this.closeMenu, toggleMenu = this.toggleMenu, selectItem = this.selectItem, selectItemAtIndex = this.selectItemAtIndex, selectHighlightedItem = this.selectHighlightedItem, setHighlightedIndex = this.setHighlightedIndex, clearSelection = this.clearSelection, clearItems = this.clearItems, reset = this.reset, setItemCount = this.setItemCount, unsetItemCount = this.unsetItemCount, setState = this.internalSetState;\n            return {\n                // prop getters\n                getRootProps: getRootProps,\n                getToggleButtonProps: getToggleButtonProps,\n                getLabelProps: getLabelProps,\n                getMenuProps: getMenuProps,\n                getInputProps: getInputProps,\n                getItemProps: getItemProps,\n                // actions\n                reset: reset,\n                openMenu: openMenu,\n                closeMenu: closeMenu,\n                toggleMenu: toggleMenu,\n                selectItem: selectItem,\n                selectItemAtIndex: selectItemAtIndex,\n                selectHighlightedItem: selectHighlightedItem,\n                setHighlightedIndex: setHighlightedIndex,\n                clearSelection: clearSelection,\n                clearItems: clearItems,\n                setItemCount: setItemCount,\n                unsetItemCount: unsetItemCount,\n                setState: setState,\n                // props\n                itemToString: itemToString,\n                // derived\n                id: id,\n                // state\n                highlightedIndex: highlightedIndex,\n                inputValue: inputValue,\n                isOpen: isOpen,\n                selectedItem: selectedItem\n            };\n        };\n        _proto.componentDidMount = function componentDidMount() {\n            var _this4 = this;\n            /* istanbul ignore if (react-native) */ if ( true && this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n                validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n            }\n            /* istanbul ignore if (react-native or SSR) */ if (!this.props.environment) {\n                this.cleanup = function() {\n                    _this4.internalClearTimeouts();\n                };\n            } else {\n                // this.isMouseDown helps us track whether the mouse is currently held down.\n                // This is useful when the user clicks on an item in the list, but holds the mouse\n                // down long enough for the list to disappear (because the blur event fires on the input)\n                // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n                // trigger hiding the menu.\n                var onMouseDown = function onMouseDown() {\n                    _this4.isMouseDown = true;\n                };\n                var onMouseUp = function onMouseUp(event) {\n                    _this4.isMouseDown = false;\n                    // if the target element or the activeElement is within a downshift node\n                    // then we don't want to reset downshift\n                    var contextWithinDownshift = targetWithinDownshift(event.target, [\n                        _this4._rootNode,\n                        _this4._menuNode\n                    ], _this4.props.environment);\n                    if (!contextWithinDownshift && _this4.getState().isOpen) {\n                        _this4.reset({\n                            type: mouseUp\n                        }, function() {\n                            return _this4.props.onOuterClick(_this4.getStateAndHelpers());\n                        });\n                    }\n                };\n                // Touching an element in iOS gives focus and hover states, but touching out of\n                // the element will remove hover, and persist the focus state, resulting in the\n                // blur event not being triggered.\n                // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n                // If the user taps outside of Downshift, the component should be reset,\n                // but not if the user is swiping\n                var onTouchStart = function onTouchStart() {\n                    _this4.isTouchMove = false;\n                };\n                var onTouchMove = function onTouchMove() {\n                    _this4.isTouchMove = true;\n                };\n                var onTouchEnd = function onTouchEnd(event) {\n                    var contextWithinDownshift = targetWithinDownshift(event.target, [\n                        _this4._rootNode,\n                        _this4._menuNode\n                    ], _this4.props.environment, false);\n                    if (!_this4.isTouchMove && !contextWithinDownshift && _this4.getState().isOpen) {\n                        _this4.reset({\n                            type: touchEnd\n                        }, function() {\n                            return _this4.props.onOuterClick(_this4.getStateAndHelpers());\n                        });\n                    }\n                };\n                var environment = this.props.environment;\n                environment.addEventListener(\"mousedown\", onMouseDown);\n                environment.addEventListener(\"mouseup\", onMouseUp);\n                environment.addEventListener(\"touchstart\", onTouchStart);\n                environment.addEventListener(\"touchmove\", onTouchMove);\n                environment.addEventListener(\"touchend\", onTouchEnd);\n                this.cleanup = function() {\n                    _this4.internalClearTimeouts();\n                    _this4.updateStatus.cancel();\n                    environment.removeEventListener(\"mousedown\", onMouseDown);\n                    environment.removeEventListener(\"mouseup\", onMouseUp);\n                    environment.removeEventListener(\"touchstart\", onTouchStart);\n                    environment.removeEventListener(\"touchmove\", onTouchMove);\n                    environment.removeEventListener(\"touchend\", onTouchEnd);\n                };\n            }\n        };\n        _proto.shouldScroll = function shouldScroll(prevState, prevProps) {\n            var _ref10 = this.props.highlightedIndex === undefined ? this.getState() : this.props, currentHighlightedIndex = _ref10.highlightedIndex;\n            var _ref11 = prevProps.highlightedIndex === undefined ? prevState : prevProps, prevHighlightedIndex = _ref11.highlightedIndex;\n            var scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;\n            var scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;\n            return scrollWhenOpen || scrollWhenNavigating;\n        };\n        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n            if (true) {\n                validateControlledUnchanged(this.state, prevProps, this.props);\n                /* istanbul ignore if (react-native) */ if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n                    validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n                }\n            }\n            if (isControlledProp(this.props, \"selectedItem\") && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {\n                this.internalSetState({\n                    type: controlledPropUpdatedSelectedItem,\n                    inputValue: this.props.itemToString(this.props.selectedItem)\n                });\n            }\n            if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n                this.scrollHighlightedItemIntoView();\n            }\n            /* istanbul ignore else (react-native) */ {\n                this.updateStatus();\n            }\n        };\n        _proto.componentWillUnmount = function componentWillUnmount() {\n            this.cleanup(); // avoids memory leak\n        };\n        _proto.render = function render() {\n            var children = unwrapArray(this.props.children, noop);\n            // because the items are rerendered every time we call the children\n            // we clear this out each render and it will be populated again as\n            // getItemProps is called.\n            this.clearItems();\n            // we reset this so we know whether the user calls getRootProps during\n            // this render. If they do then we don't need to do anything,\n            // if they don't then we need to clone the element they return and\n            // apply the props for them.\n            this.getRootProps.called = false;\n            this.getRootProps.refKey = undefined;\n            this.getRootProps.suppressRefError = undefined;\n            // we do something similar for getMenuProps\n            this.getMenuProps.called = false;\n            this.getMenuProps.refKey = undefined;\n            this.getMenuProps.suppressRefError = undefined;\n            // we do something similar for getLabelProps\n            this.getLabelProps.called = false;\n            // and something similar for getInputProps\n            this.getInputProps.called = false;\n            var element = unwrapArray(children(this.getStateAndHelpers()));\n            if (!element) {\n                return null;\n            }\n            if (this.getRootProps.called || this.props.suppressRefError) {\n                if ( true && !this.getRootProps.suppressRefError && !this.props.suppressRefError) {\n                    validateGetRootPropsCalledCorrectly(element, this.getRootProps);\n                }\n                return element;\n            } else if (isDOMElement(element)) {\n                // they didn't apply the root props, but we can clone\n                // this and apply the props ourselves\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.cloneElement)(element, this.getRootProps(getElementProps(element)));\n            }\n            /* istanbul ignore else */ if (true) {\n                // they didn't apply the root props, but they need to\n                // otherwise we can't query around the autocomplete\n                throw new Error(\"downshift: If you return a non-DOM element, you must apply the getRootProps function\");\n            }\n            /* istanbul ignore next */ return undefined;\n        };\n        return Downshift;\n    }(react__WEBPACK_IMPORTED_MODULE_4__.Component);\n    Downshift.defaultProps = {\n        defaultHighlightedIndex: null,\n        defaultIsOpen: false,\n        getA11yStatusMessage: getA11yStatusMessage$1,\n        itemToString: function itemToString(i) {\n            if (i == null) {\n                return \"\";\n            }\n            if ( true && isPlainObject(i) && !i.hasOwnProperty(\"toString\")) {\n                // eslint-disable-next-line no-console\n                console.warn(\"downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.\", \"The object that was passed:\", i);\n            }\n            return String(i);\n        },\n        onStateChange: noop,\n        onInputValueChange: noop,\n        onUserAction: noop,\n        onChange: noop,\n        onSelect: noop,\n        onOuterClick: noop,\n        selectedItemChanged: function selectedItemChanged(prevItem, item) {\n            return prevItem !== item;\n        },\n        environment: /* istanbul ignore next (ssr) */  true ? undefined : 0,\n        stateReducer: function stateReducer(state, stateToSet) {\n            return stateToSet;\n        },\n        suppressRefError: false,\n        scrollIntoView: scrollIntoView\n    };\n    Downshift.stateChangeTypes = stateChangeTypes$3;\n    return Downshift;\n}();\n true ? Downshift.propTypes = {\n    children: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    defaultHighlightedIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    defaultIsOpen: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    initialHighlightedIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    initialSelectedItem: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any),\n    initialInputValue: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    initialIsOpen: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    getA11yStatusMessage: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    itemToString: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onSelect: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onStateChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onInputValueChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onUserAction: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onOuterClick: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    selectedItemChanged: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    stateReducer: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    itemCount: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    id: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    environment: prop_types__WEBPACK_IMPORTED_MODULE_7___default().shape({\n        addEventListener: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n        removeEventListener: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n        document: prop_types__WEBPACK_IMPORTED_MODULE_7___default().shape({\n            createElement: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n            getElementById: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n            activeElement: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any).isRequired,\n            body: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any).isRequired\n        }).isRequired,\n        Node: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired\n    }),\n    suppressRefError: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    scrollIntoView: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */ selectedItem: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any),\n    isOpen: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    inputValue: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    highlightedIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    labelId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    inputId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    menuId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    getItemId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)\n} : 0;\nvar Downshift$1 = Downshift;\nfunction validateGetMenuPropsCalledCorrectly(node, _ref12) {\n    var refKey = _ref12.refKey;\n    if (!node) {\n        // eslint-disable-next-line no-console\n        console.error('downshift: The ref prop \"' + refKey + '\" from getMenuProps was not applied correctly on your menu element.');\n    }\n}\nfunction validateGetRootPropsCalledCorrectly(element, _ref13) {\n    var refKey = _ref13.refKey;\n    var refKeySpecified = refKey !== \"ref\";\n    var isComposite = !isDOMElement(element);\n    if (isComposite && !refKeySpecified && !(0,react_is__WEBPACK_IMPORTED_MODULE_5__.isForwardRef)(element)) {\n        // eslint-disable-next-line no-console\n        console.error(\"downshift: You returned a non-DOM element. You must specify a refKey in getRootProps\");\n    } else if (!isComposite && refKeySpecified) {\n        // eslint-disable-next-line no-console\n        console.error('downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"' + refKey + '\"');\n    }\n    if (!(0,react_is__WEBPACK_IMPORTED_MODULE_5__.isForwardRef)(element) && !getElementProps(element)[refKey]) {\n        // eslint-disable-next-line no-console\n        console.error('downshift: You must apply the ref prop \"' + refKey + '\" from getRootProps onto your root element.');\n    }\n}\nvar _excluded$3 = [\n    \"isInitialMount\",\n    \"highlightedIndex\",\n    \"items\",\n    \"environment\"\n];\nvar dropdownDefaultStateValues = {\n    highlightedIndex: -1,\n    isOpen: false,\n    selectedItem: null,\n    inputValue: \"\"\n};\nfunction callOnChangeProps(action, state, newState) {\n    var props = action.props, type = action.type;\n    var changes = {};\n    Object.keys(state).forEach(function(key) {\n        invokeOnChangeHandler(key, action, state, newState);\n        if (newState[key] !== state[key]) {\n            changes[key] = newState[key];\n        }\n    });\n    if (props.onStateChange && Object.keys(changes).length) {\n        props.onStateChange((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            type: type\n        }, changes));\n    }\n}\nfunction invokeOnChangeHandler(key, action, state, newState) {\n    var props = action.props, type = action.type;\n    var handler = \"on\" + capitalizeString(key) + \"Change\";\n    if (props[handler] && newState[key] !== undefined && newState[key] !== state[key]) {\n        props[handler]((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            type: type\n        }, newState));\n    }\n}\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */ function stateReducer(s, a) {\n    return a.changes;\n}\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */ function getA11ySelectionMessage(selectionParameters) {\n    var selectedItem = selectionParameters.selectedItem, itemToStringLocal = selectionParameters.itemToString;\n    return selectedItem ? itemToStringLocal(selectedItem) + \" has been selected.\" : \"\";\n}\n/**\n * Debounced call for updating the a11y message.\n */ var updateA11yStatus = debounce(function(getA11yMessage, document) {\n    setStatus(getA11yMessage(), document);\n}, 200);\n// istanbul ignore next\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_4__.useEffect;\n// istanbul ignore next\nvar useElementIds = \"useId\" in (react__WEBPACK_IMPORTED_MODULE_4___default()) // Avoid conditional useId call\n ? function useElementIds(_ref) {\n    var id = _ref.id, labelId = _ref.labelId, menuId = _ref.menuId, getItemId = _ref.getItemId, toggleButtonId = _ref.toggleButtonId, inputId = _ref.inputId;\n    // Avoid conditional useId call\n    var reactId = \"downshift-\" + react__WEBPACK_IMPORTED_MODULE_4___default().useId();\n    if (!id) {\n        id = reactId;\n    }\n    var elementIdsRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)({\n        labelId: labelId || id + \"-label\",\n        menuId: menuId || id + \"-menu\",\n        getItemId: getItemId || function(index) {\n            return id + \"-item-\" + index;\n        },\n        toggleButtonId: toggleButtonId || id + \"-toggle-button\",\n        inputId: inputId || id + \"-input\"\n    });\n    return elementIdsRef.current;\n} : function useElementIds(_ref2) {\n    var _ref2$id = _ref2.id, id = _ref2$id === void 0 ? \"downshift-\" + generateId() : _ref2$id, labelId = _ref2.labelId, menuId = _ref2.menuId, getItemId = _ref2.getItemId, toggleButtonId = _ref2.toggleButtonId, inputId = _ref2.inputId;\n    var elementIdsRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)({\n        labelId: labelId || id + \"-label\",\n        menuId: menuId || id + \"-menu\",\n        getItemId: getItemId || function(index) {\n            return id + \"-item-\" + index;\n        },\n        toggleButtonId: toggleButtonId || id + \"-toggle-button\",\n        inputId: inputId || id + \"-input\"\n    });\n    return elementIdsRef.current;\n};\nfunction getItemAndIndex(itemProp, indexProp, items, errorMessage) {\n    var item, index;\n    if (itemProp === undefined) {\n        if (indexProp === undefined) {\n            throw new Error(errorMessage);\n        }\n        item = items[indexProp];\n        index = indexProp;\n    } else {\n        index = indexProp === undefined ? items.indexOf(itemProp) : indexProp;\n        item = itemProp;\n    }\n    return [\n        item,\n        index\n    ];\n}\nfunction itemToString(item) {\n    return item ? String(item) : \"\";\n}\nfunction isAcceptedCharacterKey(key) {\n    return /^\\S{1}$/.test(key);\n}\nfunction capitalizeString(string) {\n    return \"\" + string.slice(0, 1).toUpperCase() + string.slice(1);\n}\nfunction useLatestRef(val) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(val);\n    // technically this is not \"concurrent mode safe\" because we're manipulating\n    // the value during render (so it's not idempotent). However, the places this\n    // hook is used is to support memoizing callbacks which will be called\n    // *during* render, so we need the latest values *during* render.\n    // If not for this, then we'd probably want to use useLayoutEffect instead.\n    ref.current = val;\n    return ref;\n}\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} props The hook props, also passed to createInitialState.\n * @param {Function} createInitialState Function that returns the initial state.\n * @returns {Array} An array with the state and an action dispatcher.\n */ function useEnhancedReducer(reducer, props, createInitialState) {\n    var prevStateRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    var actionRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    var enhancedReducer = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(state, action) {\n        actionRef.current = action;\n        state = getState(state, action.props);\n        var changes = reducer(state, action);\n        var newState = action.props.stateReducer(state, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, action, {\n            changes: changes\n        }));\n        return newState;\n    }, [\n        reducer\n    ]);\n    var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_4__.useReducer)(enhancedReducer, props, createInitialState), state = _useReducer[0], dispatch = _useReducer[1];\n    var propsRef = useLatestRef(props);\n    var dispatchWithProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(action) {\n        return dispatch((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            props: propsRef.current\n        }, action));\n    }, [\n        propsRef\n    ]);\n    var action = actionRef.current;\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (action && prevStateRef.current && prevStateRef.current !== state) {\n            callOnChangeProps(action, getState(prevStateRef.current, action.props), state);\n        }\n        prevStateRef.current = state;\n    }, [\n        state,\n        props,\n        action\n    ]);\n    return [\n        state,\n        dispatchWithProps\n    ];\n}\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} props The hook props, also passed to createInitialState.\n * @param {Function} createInitialState Function that returns the initial state.\n * @returns {Array} An array with the state and an action dispatcher.\n */ function useControlledReducer$1(reducer, props, createInitialState) {\n    var _useEnhancedReducer = useEnhancedReducer(reducer, props, createInitialState), state = _useEnhancedReducer[0], dispatch = _useEnhancedReducer[1];\n    return [\n        getState(state, props),\n        dispatch\n    ];\n}\nvar defaultProps$3 = {\n    itemToString: itemToString,\n    stateReducer: stateReducer,\n    getA11ySelectionMessage: getA11ySelectionMessage,\n    scrollIntoView: scrollIntoView,\n    environment: /* istanbul ignore next (ssr) */  true ? undefined : 0\n};\nfunction getDefaultValue$1(props, propKey, defaultStateValues) {\n    if (defaultStateValues === void 0) {\n        defaultStateValues = dropdownDefaultStateValues;\n    }\n    var defaultValue = props[\"default\" + capitalizeString(propKey)];\n    if (defaultValue !== undefined) {\n        return defaultValue;\n    }\n    return defaultStateValues[propKey];\n}\nfunction getInitialValue$1(props, propKey, defaultStateValues) {\n    if (defaultStateValues === void 0) {\n        defaultStateValues = dropdownDefaultStateValues;\n    }\n    var value = props[propKey];\n    if (value !== undefined) {\n        return value;\n    }\n    var initialValue = props[\"initial\" + capitalizeString(propKey)];\n    if (initialValue !== undefined) {\n        return initialValue;\n    }\n    return getDefaultValue$1(props, propKey, defaultStateValues);\n}\nfunction getInitialState$2(props) {\n    var selectedItem = getInitialValue$1(props, \"selectedItem\");\n    var isOpen = getInitialValue$1(props, \"isOpen\");\n    var highlightedIndex = getInitialValue$1(props, \"highlightedIndex\");\n    var inputValue = getInitialValue$1(props, \"inputValue\");\n    return {\n        highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.indexOf(selectedItem) : highlightedIndex,\n        isOpen: isOpen,\n        selectedItem: selectedItem,\n        inputValue: inputValue\n    };\n}\nfunction getHighlightedIndexOnOpen(props, state, offset) {\n    var items = props.items, initialHighlightedIndex = props.initialHighlightedIndex, defaultHighlightedIndex = props.defaultHighlightedIndex;\n    var selectedItem = state.selectedItem, highlightedIndex = state.highlightedIndex;\n    if (items.length === 0) {\n        return -1;\n    }\n    // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n    if (initialHighlightedIndex !== undefined && highlightedIndex === initialHighlightedIndex) {\n        return initialHighlightedIndex;\n    }\n    if (defaultHighlightedIndex !== undefined) {\n        return defaultHighlightedIndex;\n    }\n    if (selectedItem) {\n        return items.indexOf(selectedItem);\n    }\n    if (offset === 0) {\n        return -1;\n    }\n    return offset < 0 ? items.length - 1 : 0;\n}\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */ function useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {\n    var mouseAndTouchTrackersRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)({\n        isMouseDown: false,\n        isTouchMove: false\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (!environment) {\n            return;\n        }\n        // The same strategy for checking if a click occurred inside or outside downshift\n        // as in downshift.js.\n        var onMouseDown = function onMouseDown() {\n            mouseAndTouchTrackersRef.current.isMouseDown = true;\n        };\n        var onMouseUp = function onMouseUp(event) {\n            mouseAndTouchTrackersRef.current.isMouseDown = false;\n            if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map(function(ref) {\n                return ref.current;\n            }), environment)) {\n                handleBlur();\n            }\n        };\n        var onTouchStart = function onTouchStart() {\n            mouseAndTouchTrackersRef.current.isTouchMove = false;\n        };\n        var onTouchMove = function onTouchMove() {\n            mouseAndTouchTrackersRef.current.isTouchMove = true;\n        };\n        var onTouchEnd = function onTouchEnd(event) {\n            if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map(function(ref) {\n                return ref.current;\n            }), environment, false)) {\n                handleBlur();\n            }\n        };\n        environment.addEventListener(\"mousedown\", onMouseDown);\n        environment.addEventListener(\"mouseup\", onMouseUp);\n        environment.addEventListener(\"touchstart\", onTouchStart);\n        environment.addEventListener(\"touchmove\", onTouchMove);\n        environment.addEventListener(\"touchend\", onTouchEnd);\n        // eslint-disable-next-line consistent-return\n        return function cleanup() {\n            environment.removeEventListener(\"mousedown\", onMouseDown);\n            environment.removeEventListener(\"mouseup\", onMouseUp);\n            environment.removeEventListener(\"touchstart\", onTouchStart);\n            environment.removeEventListener(\"touchmove\", onTouchMove);\n            environment.removeEventListener(\"touchend\", onTouchEnd);\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isOpen,\n        environment\n    ]);\n    return mouseAndTouchTrackersRef;\n}\n/* istanbul ignore next */ // eslint-disable-next-line import/no-mutable-exports\nvar useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {\n    return noop;\n};\n/**\n * Custom hook that checks if getter props are called correctly.\n *\n * @param  {...any} propKeys Getter prop names to be handled.\n * @returns {Function} Setter function called inside getter props to set call information.\n */ /* istanbul ignore next */ if (true) {\n    useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {\n        var isInitialMountRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(true);\n        for(var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++){\n            propKeys[_key] = arguments[_key];\n        }\n        var getterPropsCalledRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(propKeys.reduce(function(acc, propKey) {\n            acc[propKey] = {};\n            return acc;\n        }, {}));\n        (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n            Object.keys(getterPropsCalledRef.current).forEach(function(propKey) {\n                var propCallInfo = getterPropsCalledRef.current[propKey];\n                if (isInitialMountRef.current) {\n                    if (!Object.keys(propCallInfo).length) {\n                        // eslint-disable-next-line no-console\n                        console.error(\"downshift: You forgot to call the \" + propKey + \" getter function on your component / element.\");\n                        return;\n                    }\n                }\n                var suppressRefError = propCallInfo.suppressRefError, refKey = propCallInfo.refKey, elementRef = propCallInfo.elementRef;\n                if ((!elementRef || !elementRef.current) && !suppressRefError) {\n                    // eslint-disable-next-line no-console\n                    console.error('downshift: The ref prop \"' + refKey + '\" from ' + propKey + \" was not applied correctly on your element.\");\n                }\n            });\n            isInitialMountRef.current = false;\n        });\n        var setGetterPropCallInfo = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(propKey, suppressRefError, refKey, elementRef) {\n            getterPropsCalledRef.current[propKey] = {\n                suppressRefError: suppressRefError,\n                refKey: refKey,\n                elementRef: elementRef\n            };\n        }, []);\n        return setGetterPropCallInfo;\n    };\n}\nfunction useA11yMessageSetter(getA11yMessage, dependencyArray, _ref3) {\n    var isInitialMount = _ref3.isInitialMount, highlightedIndex = _ref3.highlightedIndex, items = _ref3.items, environment = _ref3.environment, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref3, _excluded$3);\n    // Sets a11y status message on changes in state.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (isInitialMount || false || !(environment != null && environment.document)) {\n            return;\n        }\n        updateA11yStatus(function() {\n            return getA11yMessage((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                highlightedIndex: highlightedIndex,\n                highlightedItem: items[highlightedIndex],\n                resultCount: items.length\n            }, rest));\n        }, environment.document);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, dependencyArray);\n}\nfunction useScrollIntoView(_ref4) {\n    var highlightedIndex = _ref4.highlightedIndex, isOpen = _ref4.isOpen, itemRefs = _ref4.itemRefs, getItemNodeFromIndex = _ref4.getItemNodeFromIndex, menuElement = _ref4.menuElement, scrollIntoViewProp = _ref4.scrollIntoView;\n    // used not to scroll on highlight by mouse.\n    var shouldScrollRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(true);\n    // Scroll on highlighted item if change comes from keyboard.\n    useIsomorphicLayoutEffect(function() {\n        if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {\n            return;\n        }\n        if (shouldScrollRef.current === false) {\n            shouldScrollRef.current = true;\n        } else {\n            scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        highlightedIndex\n    ]);\n    return shouldScrollRef;\n}\n// eslint-disable-next-line import/no-mutable-exports\nvar useControlPropsValidator = noop;\n/* istanbul ignore next */ if (true) {\n    useControlPropsValidator = function useControlPropsValidator(_ref5) {\n        var isInitialMount = _ref5.isInitialMount, props = _ref5.props, state = _ref5.state;\n        // used for checking when props are moving from controlled to uncontrolled.\n        var prevPropsRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(props);\n        (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n            if (isInitialMount) {\n                return;\n            }\n            validateControlledUnchanged(state, prevPropsRef.current, props);\n            prevPropsRef.current = props;\n        }, [\n            state,\n            props,\n            isInitialMount\n        ]);\n    };\n}\n/**\n * Handles selection on Enter / Alt + ArrowUp. Closes the menu and resets the highlighted index, unless there is a highlighted.\n * In that case, selects the item and resets to defaults for open state and highlighted idex.\n * @param {Object} props The useCombobox props.\n * @param {number} highlightedIndex The index from the state.\n * @param {boolean} inputValue Also return the input value for state.\n * @returns The changes for the state.\n */ function getChangesOnSelection(props, highlightedIndex, inputValue) {\n    var _props$items;\n    if (inputValue === void 0) {\n        inputValue = true;\n    }\n    var shouldSelect = ((_props$items = props.items) == null ? void 0 : _props$items.length) && highlightedIndex >= 0;\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        isOpen: false,\n        highlightedIndex: -1\n    }, shouldSelect && (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        selectedItem: props.items[highlightedIndex],\n        isOpen: getDefaultValue$1(props, \"isOpen\"),\n        highlightedIndex: getDefaultValue$1(props, \"highlightedIndex\")\n    }, inputValue && {\n        inputValue: props.itemToString(props.items[highlightedIndex])\n    }));\n}\n// Shared between all exports.\nvar commonPropTypes = {\n    environment: prop_types__WEBPACK_IMPORTED_MODULE_7___default().shape({\n        addEventListener: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n        removeEventListener: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n        document: prop_types__WEBPACK_IMPORTED_MODULE_7___default().shape({\n            createElement: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n            getElementById: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired,\n            activeElement: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any).isRequired,\n            body: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any).isRequired\n        }).isRequired,\n        Node: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func).isRequired\n    }),\n    itemToString: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    stateReducer: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)\n};\n// Shared between useSelect, useCombobox, Downshift.\nvar commonDropdownPropTypes = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, commonPropTypes, {\n    getA11yStatusMessage: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    highlightedIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    defaultHighlightedIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    initialHighlightedIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    isOpen: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    defaultIsOpen: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    initialIsOpen: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().bool),\n    selectedItem: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any),\n    initialSelectedItem: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any),\n    defaultSelectedItem: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().any),\n    id: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    labelId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    menuId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    getItemId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    toggleButtonId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    onSelectedItemChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onHighlightedIndexChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onStateChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onIsOpenChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    scrollIntoView: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)\n});\nfunction downshiftCommonReducer(state, action, stateChangeTypes) {\n    var type = action.type, props = action.props;\n    var changes;\n    switch(type){\n        case stateChangeTypes.ItemMouseMove:\n            changes = {\n                highlightedIndex: action.disabled ? -1 : action.index\n            };\n            break;\n        case stateChangeTypes.MenuMouseLeave:\n            changes = {\n                highlightedIndex: -1\n            };\n            break;\n        case stateChangeTypes.ToggleButtonClick:\n        case stateChangeTypes.FunctionToggleMenu:\n            changes = {\n                isOpen: !state.isOpen,\n                highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)\n            };\n            break;\n        case stateChangeTypes.FunctionOpenMenu:\n            changes = {\n                isOpen: true,\n                highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n            };\n            break;\n        case stateChangeTypes.FunctionCloseMenu:\n            changes = {\n                isOpen: false\n            };\n            break;\n        case stateChangeTypes.FunctionSetHighlightedIndex:\n            changes = {\n                highlightedIndex: action.highlightedIndex\n            };\n            break;\n        case stateChangeTypes.FunctionSetInputValue:\n            changes = {\n                inputValue: action.inputValue\n            };\n            break;\n        case stateChangeTypes.FunctionReset:\n            changes = {\n                highlightedIndex: getDefaultValue$1(props, \"highlightedIndex\"),\n                isOpen: getDefaultValue$1(props, \"isOpen\"),\n                selectedItem: getDefaultValue$1(props, \"selectedItem\"),\n                inputValue: getDefaultValue$1(props, \"inputValue\")\n            };\n            break;\n        default:\n            throw new Error(\"Reducer called without proper action type.\");\n    }\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, state, changes);\n}\n/* eslint-enable complexity */ function getItemIndexByCharacterKey(_a) {\n    var keysSoFar = _a.keysSoFar, highlightedIndex = _a.highlightedIndex, items = _a.items, itemToString = _a.itemToString, isItemDisabled = _a.isItemDisabled;\n    var lowerCasedKeysSoFar = keysSoFar.toLowerCase();\n    for(var index = 0; index < items.length; index++){\n        // if we already have a search query in progress, we also consider the current highlighted item.\n        var offsetIndex = (index + highlightedIndex + (keysSoFar.length < 2 ? 1 : 0)) % items.length;\n        var item = items[offsetIndex];\n        if (item !== undefined && itemToString(item).toLowerCase().startsWith(lowerCasedKeysSoFar) && !isItemDisabled(item, offsetIndex)) {\n            return offsetIndex;\n        }\n    }\n    return highlightedIndex;\n}\nvar propTypes$2 = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)({}, commonDropdownPropTypes), {\n    items: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().array).isRequired,\n    isItemDisabled: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    getA11ySelectionMessage: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)\n});\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */ function getA11yStatusMessage(_a) {\n    var isOpen = _a.isOpen, resultCount = _a.resultCount, previousResultCount = _a.previousResultCount;\n    if (!isOpen) {\n        return \"\";\n    }\n    if (!resultCount) {\n        return \"No results are available.\";\n    }\n    if (resultCount !== previousResultCount) {\n        return \"\".concat(resultCount, \" result\").concat(resultCount === 1 ? \" is\" : \"s are\", \" available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.\");\n    }\n    return \"\";\n}\nvar defaultProps$2 = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)({}, defaultProps$3), {\n    getA11yStatusMessage: getA11yStatusMessage,\n    isItemDisabled: function() {\n        return false;\n    }\n});\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes$2 = noop;\n/* istanbul ignore next */ if (true) {\n    validatePropTypes$2 = function(options, caller) {\n        prop_types__WEBPACK_IMPORTED_MODULE_7___default().checkPropTypes(propTypes$2, options, \"prop\", caller.name);\n    };\n}\nvar ToggleButtonClick$1 =  true ? \"__togglebutton_click__\" : 0;\nvar ToggleButtonKeyDownArrowDown =  true ? \"__togglebutton_keydown_arrow_down__\" : 0;\nvar ToggleButtonKeyDownArrowUp =  true ? \"__togglebutton_keydown_arrow_up__\" : 0;\nvar ToggleButtonKeyDownCharacter =  true ? \"__togglebutton_keydown_character__\" : 0;\nvar ToggleButtonKeyDownEscape =  true ? \"__togglebutton_keydown_escape__\" : 0;\nvar ToggleButtonKeyDownHome =  true ? \"__togglebutton_keydown_home__\" : 0;\nvar ToggleButtonKeyDownEnd =  true ? \"__togglebutton_keydown_end__\" : 0;\nvar ToggleButtonKeyDownEnter =  true ? \"__togglebutton_keydown_enter__\" : 0;\nvar ToggleButtonKeyDownSpaceButton =  true ? \"__togglebutton_keydown_space_button__\" : 0;\nvar ToggleButtonKeyDownPageUp =  true ? \"__togglebutton_keydown_page_up__\" : 0;\nvar ToggleButtonKeyDownPageDown =  true ? \"__togglebutton_keydown_page_down__\" : 0;\nvar ToggleButtonBlur =  true ? \"__togglebutton_blur__\" : 0;\nvar MenuMouseLeave$1 =  true ? \"__menu_mouse_leave__\" : 0;\nvar ItemMouseMove$1 =  true ? \"__item_mouse_move__\" : 0;\nvar ItemClick$1 =  true ? \"__item_click__\" : 0;\nvar FunctionToggleMenu$1 =  true ? \"__function_toggle_menu__\" : 0;\nvar FunctionOpenMenu$1 =  true ? \"__function_open_menu__\" : 0;\nvar FunctionCloseMenu$1 =  true ? \"__function_close_menu__\" : 0;\nvar FunctionSetHighlightedIndex$1 =  true ? \"__function_set_highlighted_index__\" : 0;\nvar FunctionSelectItem$1 =  true ? \"__function_select_item__\" : 0;\nvar FunctionSetInputValue$1 =  true ? \"__function_set_input_value__\" : 0;\nvar FunctionReset$2 =  true ? \"__function_reset__\" : 0;\nvar stateChangeTypes$2 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    ToggleButtonClick: ToggleButtonClick$1,\n    ToggleButtonKeyDownArrowDown: ToggleButtonKeyDownArrowDown,\n    ToggleButtonKeyDownArrowUp: ToggleButtonKeyDownArrowUp,\n    ToggleButtonKeyDownCharacter: ToggleButtonKeyDownCharacter,\n    ToggleButtonKeyDownEscape: ToggleButtonKeyDownEscape,\n    ToggleButtonKeyDownHome: ToggleButtonKeyDownHome,\n    ToggleButtonKeyDownEnd: ToggleButtonKeyDownEnd,\n    ToggleButtonKeyDownEnter: ToggleButtonKeyDownEnter,\n    ToggleButtonKeyDownSpaceButton: ToggleButtonKeyDownSpaceButton,\n    ToggleButtonKeyDownPageUp: ToggleButtonKeyDownPageUp,\n    ToggleButtonKeyDownPageDown: ToggleButtonKeyDownPageDown,\n    ToggleButtonBlur: ToggleButtonBlur,\n    MenuMouseLeave: MenuMouseLeave$1,\n    ItemMouseMove: ItemMouseMove$1,\n    ItemClick: ItemClick$1,\n    FunctionToggleMenu: FunctionToggleMenu$1,\n    FunctionOpenMenu: FunctionOpenMenu$1,\n    FunctionCloseMenu: FunctionCloseMenu$1,\n    FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,\n    FunctionSelectItem: FunctionSelectItem$1,\n    FunctionSetInputValue: FunctionSetInputValue$1,\n    FunctionReset: FunctionReset$2\n});\n/* eslint-disable complexity */ function downshiftSelectReducer(state, action) {\n    var _props$items;\n    var type = action.type, props = action.props, altKey = action.altKey;\n    var changes;\n    switch(type){\n        case ItemClick$1:\n            changes = {\n                isOpen: getDefaultValue$1(props, \"isOpen\"),\n                highlightedIndex: getDefaultValue$1(props, \"highlightedIndex\"),\n                selectedItem: props.items[action.index]\n            };\n            break;\n        case ToggleButtonKeyDownCharacter:\n            {\n                var lowercasedKey = action.key;\n                var inputValue = \"\" + state.inputValue + lowercasedKey;\n                var prevHighlightedIndex = !state.isOpen && state.selectedItem ? props.items.indexOf(state.selectedItem) : state.highlightedIndex;\n                var highlightedIndex = getItemIndexByCharacterKey({\n                    keysSoFar: inputValue,\n                    highlightedIndex: prevHighlightedIndex,\n                    items: props.items,\n                    itemToString: props.itemToString,\n                    isItemDisabled: props.isItemDisabled\n                });\n                changes = {\n                    inputValue: inputValue,\n                    highlightedIndex: highlightedIndex,\n                    isOpen: true\n                };\n            }\n            break;\n        case ToggleButtonKeyDownArrowDown:\n            {\n                var _highlightedIndex = state.isOpen ? getHighlightedIndex(state.highlightedIndex, 1, props.items, props.isItemDisabled) : altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1);\n                changes = {\n                    highlightedIndex: _highlightedIndex,\n                    isOpen: true\n                };\n            }\n            break;\n        case ToggleButtonKeyDownArrowUp:\n            if (state.isOpen && altKey) {\n                changes = getChangesOnSelection(props, state.highlightedIndex, false);\n            } else {\n                var _highlightedIndex2 = state.isOpen ? getHighlightedIndex(state.highlightedIndex, -1, props.items, props.isItemDisabled) : getHighlightedIndexOnOpen(props, state, -1);\n                changes = {\n                    highlightedIndex: _highlightedIndex2,\n                    isOpen: true\n                };\n            }\n            break;\n        // only triggered when menu is open.\n        case ToggleButtonKeyDownEnter:\n        case ToggleButtonKeyDownSpaceButton:\n            changes = getChangesOnSelection(props, state.highlightedIndex, false);\n            break;\n        case ToggleButtonKeyDownHome:\n            changes = {\n                highlightedIndex: getNonDisabledIndex(0, false, props.items, props.isItemDisabled),\n                isOpen: true\n            };\n            break;\n        case ToggleButtonKeyDownEnd:\n            changes = {\n                highlightedIndex: getNonDisabledIndex(props.items.length - 1, true, props.items, props.isItemDisabled),\n                isOpen: true\n            };\n            break;\n        case ToggleButtonKeyDownPageUp:\n            changes = {\n                highlightedIndex: getHighlightedIndex(state.highlightedIndex, -10, props.items, props.isItemDisabled)\n            };\n            break;\n        case ToggleButtonKeyDownPageDown:\n            changes = {\n                highlightedIndex: getHighlightedIndex(state.highlightedIndex, 10, props.items, props.isItemDisabled)\n            };\n            break;\n        case ToggleButtonKeyDownEscape:\n            changes = {\n                isOpen: false,\n                highlightedIndex: -1\n            };\n            break;\n        case ToggleButtonBlur:\n            changes = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                isOpen: false,\n                highlightedIndex: -1\n            }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && {\n                selectedItem: props.items[state.highlightedIndex]\n            });\n            break;\n        case FunctionSelectItem$1:\n            changes = {\n                selectedItem: action.selectedItem\n            };\n            break;\n        default:\n            return downshiftCommonReducer(state, action, stateChangeTypes$2);\n    }\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, state, changes);\n}\n/* eslint-enable complexity */ var _excluded$2 = [\n    \"onMouseLeave\",\n    \"refKey\",\n    \"ref\"\n], _excluded2$2 = [\n    \"onBlur\",\n    \"onClick\",\n    \"onPress\",\n    \"onKeyDown\",\n    \"refKey\",\n    \"ref\"\n], _excluded3$1 = [\n    \"item\",\n    \"index\",\n    \"onMouseMove\",\n    \"onClick\",\n    \"onMouseDown\",\n    \"onPress\",\n    \"refKey\",\n    \"disabled\",\n    \"ref\"\n];\nuseSelect.stateChangeTypes = stateChangeTypes$2;\nfunction useSelect(userProps) {\n    if (userProps === void 0) {\n        userProps = {};\n    }\n    validatePropTypes$2(userProps, useSelect);\n    // Props defaults and destructuring.\n    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, defaultProps$2, userProps);\n    var items = props.items, scrollIntoView = props.scrollIntoView, environment = props.environment, itemToString = props.itemToString, getA11ySelectionMessage = props.getA11ySelectionMessage, getA11yStatusMessage = props.getA11yStatusMessage;\n    // Initial state depending on controlled props.\n    var _useControlledReducer = useControlledReducer$1(downshiftSelectReducer, props, getInitialState$2), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];\n    var isOpen = state.isOpen, highlightedIndex = state.highlightedIndex, selectedItem = state.selectedItem, inputValue = state.inputValue;\n    // Element efs.\n    var toggleButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    var menuRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    var itemRefs = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)({});\n    // used to keep the inputValue clearTimeout object between renders.\n    var clearTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    // prevent id re-generation between renders.\n    var elementIds = useElementIds(props);\n    // used to keep track of how many items we had on previous cycle.\n    var previousResultCountRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    var isInitialMountRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(true);\n    // utility callback to get item element.\n    var latest = useLatestRef({\n        state: state,\n        props: props\n    });\n    // Some utils.\n    var getItemNodeFromIndex = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(index) {\n        return itemRefs.current[elementIds.getItemId(index)];\n    }, [\n        elementIds\n    ]);\n    // Effects.\n    // Sets a11y status message on changes in state.\n    useA11yMessageSetter(getA11yStatusMessage, [\n        isOpen,\n        highlightedIndex,\n        inputValue,\n        items\n    ], (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        isInitialMount: isInitialMountRef.current,\n        previousResultCount: previousResultCountRef.current,\n        items: items,\n        environment: environment,\n        itemToString: itemToString\n    }, state));\n    // Sets a11y status message on changes in selectedItem.\n    useA11yMessageSetter(getA11ySelectionMessage, [\n        selectedItem\n    ], (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        isInitialMount: isInitialMountRef.current,\n        previousResultCount: previousResultCountRef.current,\n        items: items,\n        environment: environment,\n        itemToString: itemToString\n    }, state));\n    // Scroll on highlighted item if change comes from keyboard.\n    var shouldScrollRef = useScrollIntoView({\n        menuElement: menuRef.current,\n        highlightedIndex: highlightedIndex,\n        isOpen: isOpen,\n        itemRefs: itemRefs,\n        scrollIntoView: scrollIntoView,\n        getItemNodeFromIndex: getItemNodeFromIndex\n    });\n    // Sets cleanup for the keysSoFar callback, debounded after 500ms.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        // init the clean function here as we need access to dispatch.\n        clearTimeoutRef.current = debounce(function(outerDispatch) {\n            outerDispatch({\n                type: FunctionSetInputValue$1,\n                inputValue: \"\"\n            });\n        }, 500);\n        // Cancel any pending debounced calls on mount\n        return function() {\n            clearTimeoutRef.current.cancel();\n        };\n    }, []);\n    // Invokes the keysSoFar callback set up above.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (!inputValue) {\n            return;\n        }\n        clearTimeoutRef.current(dispatch);\n    }, [\n        dispatch,\n        inputValue\n    ]);\n    useControlPropsValidator({\n        isInitialMount: isInitialMountRef.current,\n        props: props,\n        state: state\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (isInitialMountRef.current) {\n            return;\n        }\n        previousResultCountRef.current = items.length;\n    });\n    // Focus the toggle button on first render if required.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        var focusOnOpen = getInitialValue$1(props, \"isOpen\");\n        if (focusOnOpen && toggleButtonRef.current) {\n            toggleButtonRef.current.focus();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    // Add mouse/touch events to document.\n    var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [\n        menuRef,\n        toggleButtonRef\n    ], environment, function() {\n        dispatch({\n            type: ToggleButtonBlur\n        });\n    });\n    var setGetterPropCallInfo = useGetterPropsCalledChecker(\"getMenuProps\", \"getToggleButtonProps\");\n    // Make initial ref false.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        isInitialMountRef.current = false;\n        return function() {\n            isInitialMountRef.current = true;\n        };\n    }, []);\n    // Reset itemRefs on close.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (!isOpen) {\n            itemRefs.current = {};\n        }\n    }, [\n        isOpen\n    ]);\n    // Event handler functions.\n    var toggleButtonKeyDownHandlers = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(function() {\n        return {\n            ArrowDown: function ArrowDown(event) {\n                event.preventDefault();\n                dispatch({\n                    type: ToggleButtonKeyDownArrowDown,\n                    altKey: event.altKey\n                });\n            },\n            ArrowUp: function ArrowUp(event) {\n                event.preventDefault();\n                dispatch({\n                    type: ToggleButtonKeyDownArrowUp,\n                    altKey: event.altKey\n                });\n            },\n            Home: function Home(event) {\n                event.preventDefault();\n                dispatch({\n                    type: ToggleButtonKeyDownHome\n                });\n            },\n            End: function End(event) {\n                event.preventDefault();\n                dispatch({\n                    type: ToggleButtonKeyDownEnd\n                });\n            },\n            Escape: function Escape() {\n                if (latest.current.state.isOpen) {\n                    dispatch({\n                        type: ToggleButtonKeyDownEscape\n                    });\n                }\n            },\n            Enter: function Enter(event) {\n                event.preventDefault();\n                dispatch({\n                    type: latest.current.state.isOpen ? ToggleButtonKeyDownEnter : ToggleButtonClick$1\n                });\n            },\n            PageUp: function PageUp(event) {\n                if (latest.current.state.isOpen) {\n                    event.preventDefault();\n                    dispatch({\n                        type: ToggleButtonKeyDownPageUp\n                    });\n                }\n            },\n            PageDown: function PageDown(event) {\n                if (latest.current.state.isOpen) {\n                    event.preventDefault();\n                    dispatch({\n                        type: ToggleButtonKeyDownPageDown\n                    });\n                }\n            },\n            \" \": function _(event) {\n                event.preventDefault();\n                var currentState = latest.current.state;\n                if (!currentState.isOpen) {\n                    dispatch({\n                        type: ToggleButtonClick$1\n                    });\n                    return;\n                }\n                if (currentState.inputValue) {\n                    dispatch({\n                        type: ToggleButtonKeyDownCharacter,\n                        key: \" \"\n                    });\n                } else {\n                    dispatch({\n                        type: ToggleButtonKeyDownSpaceButton\n                    });\n                }\n            }\n        };\n    }, [\n        dispatch,\n        latest\n    ]);\n    // Action functions.\n    var toggleMenu = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionToggleMenu$1\n        });\n    }, [\n        dispatch\n    ]);\n    var closeMenu = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionCloseMenu$1\n        });\n    }, [\n        dispatch\n    ]);\n    var openMenu = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionOpenMenu$1\n        });\n    }, [\n        dispatch\n    ]);\n    var setHighlightedIndex = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(newHighlightedIndex) {\n        dispatch({\n            type: FunctionSetHighlightedIndex$1,\n            highlightedIndex: newHighlightedIndex\n        });\n    }, [\n        dispatch\n    ]);\n    var selectItem = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(newSelectedItem) {\n        dispatch({\n            type: FunctionSelectItem$1,\n            selectedItem: newSelectedItem\n        });\n    }, [\n        dispatch\n    ]);\n    var reset = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionReset$2\n        });\n    }, [\n        dispatch\n    ]);\n    var setInputValue = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(newInputValue) {\n        dispatch({\n            type: FunctionSetInputValue$1,\n            inputValue: newInputValue\n        });\n    }, [\n        dispatch\n    ]);\n    // Getter functions.\n    var getLabelProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(labelProps) {\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            id: elementIds.labelId,\n            htmlFor: elementIds.toggleButtonId\n        }, labelProps);\n    }, [\n        elementIds\n    ]);\n    var getMenuProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp, _temp2) {\n        var _extends2;\n        var _ref = _temp === void 0 ? {} : _temp, onMouseLeave = _ref.onMouseLeave, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? \"ref\" : _ref$refKey, ref = _ref.ref, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref, _excluded$2);\n        var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n        var menuHandleMouseLeave = function menuHandleMouseLeave() {\n            dispatch({\n                type: MenuMouseLeave$1\n            });\n        };\n        setGetterPropCallInfo(\"getMenuProps\", suppressRefError, refKey, menuRef);\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function(menuNode) {\n            menuRef.current = menuNode;\n        }), _extends2.id = elementIds.menuId, _extends2.role = \"listbox\", _extends2[\"aria-labelledby\"] = rest && rest[\"aria-label\"] ? undefined : \"\" + elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, menuHandleMouseLeave), _extends2), rest);\n    }, [\n        dispatch,\n        setGetterPropCallInfo,\n        elementIds\n    ]);\n    var getToggleButtonProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp3, _temp4) {\n        var _extends3;\n        var _ref3 = _temp3 === void 0 ? {} : _temp3, onBlur = _ref3.onBlur, onClick = _ref3.onClick;\n        _ref3.onPress;\n        var onKeyDown = _ref3.onKeyDown, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? \"ref\" : _ref3$refKey, ref = _ref3.ref, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref3, _excluded2$2);\n        var _ref4 = _temp4 === void 0 ? {} : _temp4, _ref4$suppressRefErro = _ref4.suppressRefError, suppressRefError = _ref4$suppressRefErro === void 0 ? false : _ref4$suppressRefErro;\n        var latestState = latest.current.state;\n        var toggleButtonHandleClick = function toggleButtonHandleClick() {\n            dispatch({\n                type: ToggleButtonClick$1\n            });\n        };\n        var toggleButtonHandleBlur = function toggleButtonHandleBlur() {\n            if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n                dispatch({\n                    type: ToggleButtonBlur\n                });\n            }\n        };\n        var toggleButtonHandleKeyDown = function toggleButtonHandleKeyDown(event) {\n            var key = normalizeArrowKey(event);\n            if (key && toggleButtonKeyDownHandlers[key]) {\n                toggleButtonKeyDownHandlers[key](event);\n            } else if (isAcceptedCharacterKey(key)) {\n                dispatch({\n                    type: ToggleButtonKeyDownCharacter,\n                    key: key\n                });\n            }\n        };\n        var toggleProps = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function(toggleButtonNode) {\n            toggleButtonRef.current = toggleButtonNode;\n        }), _extends3[\"aria-activedescendant\"] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : \"\", _extends3[\"aria-controls\"] = elementIds.menuId, _extends3[\"aria-expanded\"] = latest.current.state.isOpen, _extends3[\"aria-haspopup\"] = \"listbox\", _extends3[\"aria-labelledby\"] = rest && rest[\"aria-label\"] ? undefined : \"\" + elementIds.labelId, _extends3.id = elementIds.toggleButtonId, _extends3.role = \"combobox\", _extends3.tabIndex = 0, _extends3.onBlur = callAllEventHandlers(onBlur, toggleButtonHandleBlur), _extends3), rest);\n        if (!rest.disabled) {\n            /* istanbul ignore if (react-native) */ {\n                toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);\n                toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);\n            }\n        }\n        setGetterPropCallInfo(\"getToggleButtonProps\", suppressRefError, refKey, toggleButtonRef);\n        return toggleProps;\n    }, [\n        latest,\n        elementIds,\n        setGetterPropCallInfo,\n        dispatch,\n        mouseAndTouchTrackersRef,\n        toggleButtonKeyDownHandlers\n    ]);\n    var getItemProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp5) {\n        var _extends4;\n        var _ref5 = _temp5 === void 0 ? {} : _temp5, itemProp = _ref5.item, indexProp = _ref5.index, onMouseMove = _ref5.onMouseMove, onClick = _ref5.onClick, onMouseDown = _ref5.onMouseDown;\n        _ref5.onPress;\n        var _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? \"ref\" : _ref5$refKey, disabledProp = _ref5.disabled, ref = _ref5.ref, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref5, _excluded3$1);\n        if (disabledProp !== undefined) {\n            console.warn('Passing \"disabled\" as an argument to getItemProps is not supported anymore. Please use the isItemDisabled prop from useSelect.');\n        }\n        var _latest$current = latest.current, latestState = _latest$current.state, latestProps = _latest$current.props;\n        var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, \"Pass either item or index to getItemProps!\"), item = _getItemAndIndex[0], index = _getItemAndIndex[1];\n        var disabled = latestProps.isItemDisabled(item, index);\n        var itemHandleMouseMove = function itemHandleMouseMove() {\n            if (index === latestState.highlightedIndex) {\n                return;\n            }\n            shouldScrollRef.current = false;\n            dispatch({\n                type: ItemMouseMove$1,\n                index: index,\n                disabled: disabled\n            });\n        };\n        var itemHandleClick = function itemHandleClick() {\n            dispatch({\n                type: ItemClick$1,\n                index: index\n            });\n        };\n        var itemHandleMouseDown = function itemHandleMouseDown(e) {\n            return e.preventDefault();\n        }; // keep focus on the toggle after item click select.\n        var itemProps = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends4 = {}, _extends4[refKey] = handleRefs(ref, function(itemNode) {\n            if (itemNode) {\n                itemRefs.current[elementIds.getItemId(index)] = itemNode;\n            }\n        }), _extends4[\"aria-disabled\"] = disabled, _extends4[\"aria-selected\"] = \"\" + (item === latestState.selectedItem), _extends4.id = elementIds.getItemId(index), _extends4.role = \"option\", _extends4), rest);\n        if (!disabled) {\n            /* istanbul ignore next (react-native) */ {\n                itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);\n            }\n        }\n        itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);\n        itemProps.onMouseDown = callAllEventHandlers(onMouseDown, itemHandleMouseDown);\n        return itemProps;\n    }, [\n        latest,\n        elementIds,\n        shouldScrollRef,\n        dispatch\n    ]);\n    return {\n        // prop getters.\n        getToggleButtonProps: getToggleButtonProps,\n        getLabelProps: getLabelProps,\n        getMenuProps: getMenuProps,\n        getItemProps: getItemProps,\n        // actions.\n        toggleMenu: toggleMenu,\n        openMenu: openMenu,\n        closeMenu: closeMenu,\n        setHighlightedIndex: setHighlightedIndex,\n        selectItem: selectItem,\n        reset: reset,\n        setInputValue: setInputValue,\n        // state.\n        highlightedIndex: highlightedIndex,\n        isOpen: isOpen,\n        selectedItem: selectedItem,\n        inputValue: inputValue\n    };\n}\nvar InputKeyDownArrowDown =  true ? \"__input_keydown_arrow_down__\" : 0;\nvar InputKeyDownArrowUp =  true ? \"__input_keydown_arrow_up__\" : 0;\nvar InputKeyDownEscape =  true ? \"__input_keydown_escape__\" : 0;\nvar InputKeyDownHome =  true ? \"__input_keydown_home__\" : 0;\nvar InputKeyDownEnd =  true ? \"__input_keydown_end__\" : 0;\nvar InputKeyDownPageUp =  true ? \"__input_keydown_page_up__\" : 0;\nvar InputKeyDownPageDown =  true ? \"__input_keydown_page_down__\" : 0;\nvar InputKeyDownEnter =  true ? \"__input_keydown_enter__\" : 0;\nvar InputChange =  true ? \"__input_change__\" : 0;\nvar InputBlur =  true ? \"__input_blur__\" : 0;\nvar InputClick =  true ? \"__input_click__\" : 0;\nvar MenuMouseLeave =  true ? \"__menu_mouse_leave__\" : 0;\nvar ItemMouseMove =  true ? \"__item_mouse_move__\" : 0;\nvar ItemClick =  true ? \"__item_click__\" : 0;\nvar ToggleButtonClick =  true ? \"__togglebutton_click__\" : 0;\nvar FunctionToggleMenu =  true ? \"__function_toggle_menu__\" : 0;\nvar FunctionOpenMenu =  true ? \"__function_open_menu__\" : 0;\nvar FunctionCloseMenu =  true ? \"__function_close_menu__\" : 0;\nvar FunctionSetHighlightedIndex =  true ? \"__function_set_highlighted_index__\" : 0;\nvar FunctionSelectItem =  true ? \"__function_select_item__\" : 0;\nvar FunctionSetInputValue =  true ? \"__function_set_input_value__\" : 0;\nvar FunctionReset$1 =  true ? \"__function_reset__\" : 0;\nvar ControlledPropUpdatedSelectedItem =  true ? \"__controlled_prop_updated_selected_item__\" : 0;\nvar stateChangeTypes$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    InputKeyDownArrowDown: InputKeyDownArrowDown,\n    InputKeyDownArrowUp: InputKeyDownArrowUp,\n    InputKeyDownEscape: InputKeyDownEscape,\n    InputKeyDownHome: InputKeyDownHome,\n    InputKeyDownEnd: InputKeyDownEnd,\n    InputKeyDownPageUp: InputKeyDownPageUp,\n    InputKeyDownPageDown: InputKeyDownPageDown,\n    InputKeyDownEnter: InputKeyDownEnter,\n    InputChange: InputChange,\n    InputBlur: InputBlur,\n    InputClick: InputClick,\n    MenuMouseLeave: MenuMouseLeave,\n    ItemMouseMove: ItemMouseMove,\n    ItemClick: ItemClick,\n    ToggleButtonClick: ToggleButtonClick,\n    FunctionToggleMenu: FunctionToggleMenu,\n    FunctionOpenMenu: FunctionOpenMenu,\n    FunctionCloseMenu: FunctionCloseMenu,\n    FunctionSetHighlightedIndex: FunctionSetHighlightedIndex,\n    FunctionSelectItem: FunctionSelectItem,\n    FunctionSetInputValue: FunctionSetInputValue,\n    FunctionReset: FunctionReset$1,\n    ControlledPropUpdatedSelectedItem: ControlledPropUpdatedSelectedItem\n});\nfunction getInitialState$1(props) {\n    var initialState = getInitialState$2(props);\n    var selectedItem = initialState.selectedItem;\n    var inputValue = initialState.inputValue;\n    if (inputValue === \"\" && selectedItem && props.defaultInputValue === undefined && props.initialInputValue === undefined && props.inputValue === undefined) {\n        inputValue = props.itemToString(selectedItem);\n    }\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, initialState, {\n        inputValue: inputValue\n    });\n}\nvar propTypes$1 = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, commonDropdownPropTypes, {\n    items: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().array).isRequired,\n    isItemDisabled: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    selectedItemChanged: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    getA11ySelectionMessage: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    inputValue: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    defaultInputValue: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    initialInputValue: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    inputId: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    onInputValueChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func)\n});\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} props The hook props, also passed to createInitialState.\n * @param {Function} createInitialState Function that returns the initial state.\n * @returns {Array} An array with the state and an action dispatcher.\n */ function useControlledReducer(reducer, props, createInitialState) {\n    var previousSelectedItemRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    var _useEnhancedReducer = useEnhancedReducer(reducer, props, createInitialState), state = _useEnhancedReducer[0], dispatch = _useEnhancedReducer[1];\n    // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (!isControlledProp(props, \"selectedItem\")) {\n            return;\n        }\n        if (props.selectedItemChanged(previousSelectedItemRef.current, props.selectedItem)) {\n            dispatch({\n                type: ControlledPropUpdatedSelectedItem,\n                inputValue: props.itemToString(props.selectedItem)\n            });\n        }\n        previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        state.selectedItem,\n        props.selectedItem\n    ]);\n    return [\n        getState(state, props),\n        dispatch\n    ];\n}\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes$1 = noop;\n/* istanbul ignore next */ if (true) {\n    validatePropTypes$1 = function validatePropTypes(options, caller) {\n        prop_types__WEBPACK_IMPORTED_MODULE_7___default().checkPropTypes(propTypes$1, options, \"prop\", caller.name);\n    };\n}\nvar defaultProps$1 = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, defaultProps$3, {\n    selectedItemChanged: function selectedItemChanged(prevItem, item) {\n        return prevItem !== item;\n    },\n    getA11yStatusMessage: getA11yStatusMessage$1,\n    isItemDisabled: function isItemDisabled() {\n        return false;\n    }\n});\n/* eslint-disable complexity */ function downshiftUseComboboxReducer(state, action) {\n    var _props$items;\n    var type = action.type, props = action.props, altKey = action.altKey;\n    var changes;\n    switch(type){\n        case ItemClick:\n            changes = {\n                isOpen: getDefaultValue$1(props, \"isOpen\"),\n                highlightedIndex: getDefaultValue$1(props, \"highlightedIndex\"),\n                selectedItem: props.items[action.index],\n                inputValue: props.itemToString(props.items[action.index])\n            };\n            break;\n        case InputKeyDownArrowDown:\n            if (state.isOpen) {\n                changes = {\n                    highlightedIndex: getHighlightedIndex(state.highlightedIndex, 1, props.items, props.isItemDisabled, true)\n                };\n            } else {\n                changes = {\n                    highlightedIndex: altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1),\n                    isOpen: props.items.length >= 0\n                };\n            }\n            break;\n        case InputKeyDownArrowUp:\n            if (state.isOpen) {\n                if (altKey) {\n                    changes = getChangesOnSelection(props, state.highlightedIndex);\n                } else {\n                    changes = {\n                        highlightedIndex: getHighlightedIndex(state.highlightedIndex, -1, props.items, props.isItemDisabled, true)\n                    };\n                }\n            } else {\n                changes = {\n                    highlightedIndex: getHighlightedIndexOnOpen(props, state, -1),\n                    isOpen: props.items.length >= 0\n                };\n            }\n            break;\n        case InputKeyDownEnter:\n            changes = getChangesOnSelection(props, state.highlightedIndex);\n            break;\n        case InputKeyDownEscape:\n            changes = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                isOpen: false,\n                highlightedIndex: -1\n            }, !state.isOpen && {\n                selectedItem: null,\n                inputValue: \"\"\n            });\n            break;\n        case InputKeyDownPageUp:\n            changes = {\n                highlightedIndex: getHighlightedIndex(state.highlightedIndex, -10, props.items, props.isItemDisabled, true)\n            };\n            break;\n        case InputKeyDownPageDown:\n            changes = {\n                highlightedIndex: getHighlightedIndex(state.highlightedIndex, 10, props.items, props.isItemDisabled, true)\n            };\n            break;\n        case InputKeyDownHome:\n            changes = {\n                highlightedIndex: getNonDisabledIndex(0, false, props.items, props.isItemDisabled)\n            };\n            break;\n        case InputKeyDownEnd:\n            changes = {\n                highlightedIndex: getNonDisabledIndex(props.items.length - 1, true, props.items, props.isItemDisabled)\n            };\n            break;\n        case InputBlur:\n            changes = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                isOpen: false,\n                highlightedIndex: -1\n            }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && action.selectItem && {\n                selectedItem: props.items[state.highlightedIndex],\n                inputValue: props.itemToString(props.items[state.highlightedIndex])\n            });\n            break;\n        case InputChange:\n            changes = {\n                isOpen: true,\n                highlightedIndex: getDefaultValue$1(props, \"highlightedIndex\"),\n                inputValue: action.inputValue\n            };\n            break;\n        case InputClick:\n            changes = {\n                isOpen: !state.isOpen,\n                highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)\n            };\n            break;\n        case FunctionSelectItem:\n            changes = {\n                selectedItem: action.selectedItem,\n                inputValue: props.itemToString(action.selectedItem)\n            };\n            break;\n        case ControlledPropUpdatedSelectedItem:\n            changes = {\n                inputValue: action.inputValue\n            };\n            break;\n        default:\n            return downshiftCommonReducer(state, action, stateChangeTypes$1);\n    }\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, state, changes);\n}\n/* eslint-enable complexity */ var _excluded$1 = [\n    \"onMouseLeave\",\n    \"refKey\",\n    \"ref\"\n], _excluded2$1 = [\n    \"item\",\n    \"index\",\n    \"refKey\",\n    \"ref\",\n    \"onMouseMove\",\n    \"onMouseDown\",\n    \"onClick\",\n    \"onPress\",\n    \"disabled\"\n], _excluded3 = [\n    \"onClick\",\n    \"onPress\",\n    \"refKey\",\n    \"ref\"\n], _excluded4 = [\n    \"onKeyDown\",\n    \"onChange\",\n    \"onInput\",\n    \"onBlur\",\n    \"onChangeText\",\n    \"onClick\",\n    \"refKey\",\n    \"ref\"\n];\nuseCombobox.stateChangeTypes = stateChangeTypes$1;\nfunction useCombobox(userProps) {\n    if (userProps === void 0) {\n        userProps = {};\n    }\n    validatePropTypes$1(userProps, useCombobox);\n    // Props defaults and destructuring.\n    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, defaultProps$1, userProps);\n    var items = props.items, scrollIntoView = props.scrollIntoView, environment = props.environment, getA11yStatusMessage = props.getA11yStatusMessage, getA11ySelectionMessage = props.getA11ySelectionMessage, itemToString = props.itemToString;\n    // Initial state depending on controlled props.\n    var _useControlledReducer = useControlledReducer(downshiftUseComboboxReducer, props, getInitialState$1), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];\n    var isOpen = state.isOpen, highlightedIndex = state.highlightedIndex, selectedItem = state.selectedItem, inputValue = state.inputValue;\n    // Element refs.\n    var menuRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    var itemRefs = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)({});\n    var inputRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    var toggleButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    var isInitialMountRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(true);\n    // prevent id re-generation between renders.\n    var elementIds = useElementIds(props);\n    // used to keep track of how many items we had on previous cycle.\n    var previousResultCountRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    // utility callback to get item element.\n    var latest = useLatestRef({\n        state: state,\n        props: props\n    });\n    var getItemNodeFromIndex = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(index) {\n        return itemRefs.current[elementIds.getItemId(index)];\n    }, [\n        elementIds\n    ]);\n    // Effects.\n    // Sets a11y status message on changes in state.\n    useA11yMessageSetter(getA11yStatusMessage, [\n        isOpen,\n        highlightedIndex,\n        inputValue,\n        items\n    ], (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        isInitialMount: isInitialMountRef.current,\n        previousResultCount: previousResultCountRef.current,\n        items: items,\n        environment: environment,\n        itemToString: itemToString\n    }, state));\n    // Sets a11y status message on changes in selectedItem.\n    useA11yMessageSetter(getA11ySelectionMessage, [\n        selectedItem\n    ], (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        isInitialMount: isInitialMountRef.current,\n        previousResultCount: previousResultCountRef.current,\n        items: items,\n        environment: environment,\n        itemToString: itemToString\n    }, state));\n    // Scroll on highlighted item if change comes from keyboard.\n    var shouldScrollRef = useScrollIntoView({\n        menuElement: menuRef.current,\n        highlightedIndex: highlightedIndex,\n        isOpen: isOpen,\n        itemRefs: itemRefs,\n        scrollIntoView: scrollIntoView,\n        getItemNodeFromIndex: getItemNodeFromIndex\n    });\n    useControlPropsValidator({\n        isInitialMount: isInitialMountRef.current,\n        props: props,\n        state: state\n    });\n    // Focus the input on first render if required.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        var focusOnOpen = getInitialValue$1(props, \"isOpen\");\n        if (focusOnOpen && inputRef.current) {\n            inputRef.current.focus();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (isInitialMountRef.current) {\n            return;\n        }\n        previousResultCountRef.current = items.length;\n    });\n    // Add mouse/touch events to document.\n    var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [\n        inputRef,\n        menuRef,\n        toggleButtonRef\n    ], environment, function() {\n        dispatch({\n            type: InputBlur,\n            selectItem: false\n        });\n    });\n    var setGetterPropCallInfo = useGetterPropsCalledChecker(\"getInputProps\", \"getMenuProps\");\n    // Make initial ref false.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        isInitialMountRef.current = false;\n        return function() {\n            isInitialMountRef.current = true;\n        };\n    }, []);\n    // Reset itemRefs on close.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (!isOpen) {\n            itemRefs.current = {};\n        }\n    }, [\n        isOpen\n    ]);\n    // Reset itemRefs on close.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        var _inputRef$current;\n        if (!isOpen || !(environment != null && environment.document) || !(inputRef != null && (_inputRef$current = inputRef.current) != null && _inputRef$current.focus)) {\n            return;\n        }\n        if (environment.document.activeElement !== inputRef.current) {\n            inputRef.current.focus();\n        }\n    }, [\n        isOpen,\n        environment\n    ]);\n    /* Event handler functions */ var inputKeyDownHandlers = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(function() {\n        return {\n            ArrowDown: function ArrowDown(event) {\n                event.preventDefault();\n                dispatch({\n                    type: InputKeyDownArrowDown,\n                    altKey: event.altKey\n                });\n            },\n            ArrowUp: function ArrowUp(event) {\n                event.preventDefault();\n                dispatch({\n                    type: InputKeyDownArrowUp,\n                    altKey: event.altKey\n                });\n            },\n            Home: function Home(event) {\n                if (!latest.current.state.isOpen) {\n                    return;\n                }\n                event.preventDefault();\n                dispatch({\n                    type: InputKeyDownHome\n                });\n            },\n            End: function End(event) {\n                if (!latest.current.state.isOpen) {\n                    return;\n                }\n                event.preventDefault();\n                dispatch({\n                    type: InputKeyDownEnd\n                });\n            },\n            Escape: function Escape(event) {\n                var latestState = latest.current.state;\n                if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {\n                    event.preventDefault();\n                    dispatch({\n                        type: InputKeyDownEscape\n                    });\n                }\n            },\n            Enter: function Enter(event) {\n                var latestState = latest.current.state;\n                // if closed or no highlighted index, do nothing.\n                if (!latestState.isOpen || event.which === 229 // if IME composing, wait for next Enter keydown event.\n                ) {\n                    return;\n                }\n                event.preventDefault();\n                dispatch({\n                    type: InputKeyDownEnter\n                });\n            },\n            PageUp: function PageUp(event) {\n                if (latest.current.state.isOpen) {\n                    event.preventDefault();\n                    dispatch({\n                        type: InputKeyDownPageUp\n                    });\n                }\n            },\n            PageDown: function PageDown(event) {\n                if (latest.current.state.isOpen) {\n                    event.preventDefault();\n                    dispatch({\n                        type: InputKeyDownPageDown\n                    });\n                }\n            }\n        };\n    }, [\n        dispatch,\n        latest\n    ]);\n    // Getter props.\n    var getLabelProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(labelProps) {\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            id: elementIds.labelId,\n            htmlFor: elementIds.inputId\n        }, labelProps);\n    }, [\n        elementIds\n    ]);\n    var getMenuProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp, _temp2) {\n        var _extends2;\n        var _ref = _temp === void 0 ? {} : _temp, onMouseLeave = _ref.onMouseLeave, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? \"ref\" : _ref$refKey, ref = _ref.ref, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref, _excluded$1);\n        var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n        setGetterPropCallInfo(\"getMenuProps\", suppressRefError, refKey, menuRef);\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function(menuNode) {\n            menuRef.current = menuNode;\n        }), _extends2.id = elementIds.menuId, _extends2.role = \"listbox\", _extends2[\"aria-labelledby\"] = rest && rest[\"aria-label\"] ? undefined : \"\" + elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, function() {\n            dispatch({\n                type: MenuMouseLeave\n            });\n        }), _extends2), rest);\n    }, [\n        dispatch,\n        setGetterPropCallInfo,\n        elementIds\n    ]);\n    var getItemProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp3) {\n        var _extends3, _ref4;\n        var _ref3 = _temp3 === void 0 ? {} : _temp3, itemProp = _ref3.item, indexProp = _ref3.index, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? \"ref\" : _ref3$refKey, ref = _ref3.ref, onMouseMove = _ref3.onMouseMove, onMouseDown = _ref3.onMouseDown, onClick = _ref3.onClick;\n        _ref3.onPress;\n        var disabledProp = _ref3.disabled, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref3, _excluded2$1);\n        if (disabledProp !== undefined) {\n            console.warn('Passing \"disabled\" as an argument to getItemProps is not supported anymore. Please use the isItemDisabled prop from useCombobox.');\n        }\n        var _latest$current = latest.current, latestProps = _latest$current.props, latestState = _latest$current.state;\n        var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, \"Pass either item or index to getItemProps!\"), item = _getItemAndIndex[0], index = _getItemAndIndex[1];\n        var disabled = latestProps.isItemDisabled(item, index);\n        var onSelectKey = \"onClick\";\n        var customClickHandler = onClick;\n        var itemHandleMouseMove = function itemHandleMouseMove() {\n            if (index === latestState.highlightedIndex) {\n                return;\n            }\n            shouldScrollRef.current = false;\n            dispatch({\n                type: ItemMouseMove,\n                index: index,\n                disabled: disabled\n            });\n        };\n        var itemHandleClick = function itemHandleClick() {\n            dispatch({\n                type: ItemClick,\n                index: index\n            });\n        };\n        var itemHandleMouseDown = function itemHandleMouseDown(e) {\n            return e.preventDefault();\n        }; // keep focus on the input after item click select.\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function(itemNode) {\n            if (itemNode) {\n                itemRefs.current[elementIds.getItemId(index)] = itemNode;\n            }\n        }), _extends3[\"aria-disabled\"] = disabled, _extends3[\"aria-selected\"] = \"\" + (index === latestState.highlightedIndex), _extends3.id = elementIds.getItemId(index), _extends3.role = \"option\", _extends3), !disabled && (_ref4 = {}, _ref4[onSelectKey] = callAllEventHandlers(customClickHandler, itemHandleClick), _ref4), {\n            onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),\n            onMouseDown: callAllEventHandlers(onMouseDown, itemHandleMouseDown)\n        }, rest);\n    }, [\n        dispatch,\n        latest,\n        shouldScrollRef,\n        elementIds\n    ]);\n    var getToggleButtonProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp4) {\n        var _extends4;\n        var _ref5 = _temp4 === void 0 ? {} : _temp4, onClick = _ref5.onClick;\n        _ref5.onPress;\n        var _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? \"ref\" : _ref5$refKey, ref = _ref5.ref, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref5, _excluded3);\n        var latestState = latest.current.state;\n        var toggleButtonHandleClick = function toggleButtonHandleClick() {\n            dispatch({\n                type: ToggleButtonClick\n            });\n        };\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends4 = {}, _extends4[refKey] = handleRefs(ref, function(toggleButtonNode) {\n            toggleButtonRef.current = toggleButtonNode;\n        }), _extends4[\"aria-controls\"] = elementIds.menuId, _extends4[\"aria-expanded\"] = latestState.isOpen, _extends4.id = elementIds.toggleButtonId, _extends4.tabIndex = -1, _extends4), !rest.disabled && (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, {\n            onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)\n        }), rest);\n    }, [\n        dispatch,\n        latest,\n        elementIds\n    ]);\n    var getInputProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp5, _temp6) {\n        var _extends5;\n        var _ref6 = _temp5 === void 0 ? {} : _temp5, onKeyDown = _ref6.onKeyDown, onChange = _ref6.onChange, onInput = _ref6.onInput, onBlur = _ref6.onBlur;\n        _ref6.onChangeText;\n        var onClick = _ref6.onClick, _ref6$refKey = _ref6.refKey, refKey = _ref6$refKey === void 0 ? \"ref\" : _ref6$refKey, ref = _ref6.ref, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref6, _excluded4);\n        var _ref7 = _temp6 === void 0 ? {} : _temp6, _ref7$suppressRefErro = _ref7.suppressRefError, suppressRefError = _ref7$suppressRefErro === void 0 ? false : _ref7$suppressRefErro;\n        setGetterPropCallInfo(\"getInputProps\", suppressRefError, refKey, inputRef);\n        var latestState = latest.current.state;\n        var inputHandleKeyDown = function inputHandleKeyDown(event) {\n            var key = normalizeArrowKey(event);\n            if (key && inputKeyDownHandlers[key]) {\n                inputKeyDownHandlers[key](event);\n            }\n        };\n        var inputHandleChange = function inputHandleChange(event) {\n            dispatch({\n                type: InputChange,\n                inputValue: event.target.value\n            });\n        };\n        var inputHandleBlur = function inputHandleBlur(event) {\n            /* istanbul ignore else */ if (environment != null && environment.document && latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n                var isBlurByTabChange = event.relatedTarget === null && environment.document.activeElement !== environment.document.body;\n                dispatch({\n                    type: InputBlur,\n                    selectItem: !isBlurByTabChange\n                });\n            }\n        };\n        var inputHandleClick = function inputHandleClick() {\n            dispatch({\n                type: InputClick\n            });\n        };\n        /* istanbul ignore next (preact) */ var onChangeKey = \"onChange\";\n        var eventHandlers = {};\n        if (!rest.disabled) {\n            var _eventHandlers;\n            eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, inputHandleBlur), _eventHandlers.onClick = callAllEventHandlers(onClick, inputHandleClick), _eventHandlers);\n        }\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends5 = {}, _extends5[refKey] = handleRefs(ref, function(inputNode) {\n            inputRef.current = inputNode;\n        }), _extends5[\"aria-activedescendant\"] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : \"\", _extends5[\"aria-autocomplete\"] = \"list\", _extends5[\"aria-controls\"] = elementIds.menuId, _extends5[\"aria-expanded\"] = latestState.isOpen, _extends5[\"aria-labelledby\"] = rest && rest[\"aria-label\"] ? undefined : elementIds.labelId, _extends5.autoComplete = \"off\", _extends5.id = elementIds.inputId, _extends5.role = \"combobox\", _extends5.value = latestState.inputValue, _extends5), eventHandlers, rest);\n    }, [\n        setGetterPropCallInfo,\n        latest,\n        elementIds,\n        inputKeyDownHandlers,\n        dispatch,\n        mouseAndTouchTrackersRef,\n        environment\n    ]);\n    // returns\n    var toggleMenu = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionToggleMenu\n        });\n    }, [\n        dispatch\n    ]);\n    var closeMenu = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionCloseMenu\n        });\n    }, [\n        dispatch\n    ]);\n    var openMenu = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionOpenMenu\n        });\n    }, [\n        dispatch\n    ]);\n    var setHighlightedIndex = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(newHighlightedIndex) {\n        dispatch({\n            type: FunctionSetHighlightedIndex,\n            highlightedIndex: newHighlightedIndex\n        });\n    }, [\n        dispatch\n    ]);\n    var selectItem = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(newSelectedItem) {\n        dispatch({\n            type: FunctionSelectItem,\n            selectedItem: newSelectedItem\n        });\n    }, [\n        dispatch\n    ]);\n    var setInputValue = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(newInputValue) {\n        dispatch({\n            type: FunctionSetInputValue,\n            inputValue: newInputValue\n        });\n    }, [\n        dispatch\n    ]);\n    var reset = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionReset$1\n        });\n    }, [\n        dispatch\n    ]);\n    return {\n        // prop getters.\n        getItemProps: getItemProps,\n        getLabelProps: getLabelProps,\n        getMenuProps: getMenuProps,\n        getInputProps: getInputProps,\n        getToggleButtonProps: getToggleButtonProps,\n        // actions.\n        toggleMenu: toggleMenu,\n        openMenu: openMenu,\n        closeMenu: closeMenu,\n        setHighlightedIndex: setHighlightedIndex,\n        setInputValue: setInputValue,\n        selectItem: selectItem,\n        reset: reset,\n        // state.\n        highlightedIndex: highlightedIndex,\n        isOpen: isOpen,\n        selectedItem: selectedItem,\n        inputValue: inputValue\n    };\n}\nvar defaultStateValues = {\n    activeIndex: -1,\n    selectedItems: []\n};\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */ function getInitialValue(props, propKey) {\n    return getInitialValue$1(props, propKey, defaultStateValues);\n}\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */ function getDefaultValue(props, propKey) {\n    return getDefaultValue$1(props, propKey, defaultStateValues);\n}\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */ function getInitialState(props) {\n    var activeIndex = getInitialValue(props, \"activeIndex\");\n    var selectedItems = getInitialValue(props, \"selectedItems\");\n    return {\n        activeIndex: activeIndex,\n        selectedItems: selectedItems\n    };\n}\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */ function isKeyDownOperationPermitted(event) {\n    if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n        return false;\n    }\n    var element = event.target;\n    if (element instanceof HTMLInputElement && // if element is a text input\n    element.value !== \"\" && // and we have text in it\n    // and cursor is either not at the start or is currently highlighting text.\n    (element.selectionStart !== 0 || element.selectionEnd !== 0)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */ function getA11yRemovalMessage(selectionParameters) {\n    var removedSelectedItem = selectionParameters.removedSelectedItem, itemToStringLocal = selectionParameters.itemToString;\n    return itemToStringLocal(removedSelectedItem) + \" has been removed.\";\n}\nvar propTypes = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, commonPropTypes, {\n    selectedItems: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().array),\n    initialSelectedItems: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().array),\n    defaultSelectedItems: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().array),\n    getA11yRemovalMessage: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    activeIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    initialActiveIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    defaultActiveIndex: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().number),\n    onActiveIndexChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    onSelectedItemsChange: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().func),\n    keyNavigationNext: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string),\n    keyNavigationPrevious: (prop_types__WEBPACK_IMPORTED_MODULE_7___default().string)\n});\nvar defaultProps = {\n    itemToString: defaultProps$3.itemToString,\n    stateReducer: defaultProps$3.stateReducer,\n    environment: defaultProps$3.environment,\n    getA11yRemovalMessage: getA11yRemovalMessage,\n    keyNavigationNext: \"ArrowRight\",\n    keyNavigationPrevious: \"ArrowLeft\"\n};\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes = noop;\n/* istanbul ignore next */ if (true) {\n    validatePropTypes = function validatePropTypes(options, caller) {\n        prop_types__WEBPACK_IMPORTED_MODULE_7___default().checkPropTypes(propTypes, options, \"prop\", caller.name);\n    };\n}\nvar SelectedItemClick =  true ? \"__selected_item_click__\" : 0;\nvar SelectedItemKeyDownDelete =  true ? \"__selected_item_keydown_delete__\" : 0;\nvar SelectedItemKeyDownBackspace =  true ? \"__selected_item_keydown_backspace__\" : 0;\nvar SelectedItemKeyDownNavigationNext =  true ? \"__selected_item_keydown_navigation_next__\" : 0;\nvar SelectedItemKeyDownNavigationPrevious =  true ? \"__selected_item_keydown_navigation_previous__\" : 0;\nvar DropdownKeyDownNavigationPrevious =  true ? \"__dropdown_keydown_navigation_previous__\" : 0;\nvar DropdownKeyDownBackspace =  true ? \"__dropdown_keydown_backspace__\" : 0;\nvar DropdownClick =  true ? \"__dropdown_click__\" : 0;\nvar FunctionAddSelectedItem =  true ? \"__function_add_selected_item__\" : 0;\nvar FunctionRemoveSelectedItem =  true ? \"__function_remove_selected_item__\" : 0;\nvar FunctionSetSelectedItems =  true ? \"__function_set_selected_items__\" : 0;\nvar FunctionSetActiveIndex =  true ? \"__function_set_active_index__\" : 0;\nvar FunctionReset =  true ? \"__function_reset__\" : 0;\nvar stateChangeTypes = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    SelectedItemClick: SelectedItemClick,\n    SelectedItemKeyDownDelete: SelectedItemKeyDownDelete,\n    SelectedItemKeyDownBackspace: SelectedItemKeyDownBackspace,\n    SelectedItemKeyDownNavigationNext: SelectedItemKeyDownNavigationNext,\n    SelectedItemKeyDownNavigationPrevious: SelectedItemKeyDownNavigationPrevious,\n    DropdownKeyDownNavigationPrevious: DropdownKeyDownNavigationPrevious,\n    DropdownKeyDownBackspace: DropdownKeyDownBackspace,\n    DropdownClick: DropdownClick,\n    FunctionAddSelectedItem: FunctionAddSelectedItem,\n    FunctionRemoveSelectedItem: FunctionRemoveSelectedItem,\n    FunctionSetSelectedItems: FunctionSetSelectedItems,\n    FunctionSetActiveIndex: FunctionSetActiveIndex,\n    FunctionReset: FunctionReset\n});\n/* eslint-disable complexity */ function downshiftMultipleSelectionReducer(state, action) {\n    var type = action.type, index = action.index, props = action.props, selectedItem = action.selectedItem;\n    var activeIndex = state.activeIndex, selectedItems = state.selectedItems;\n    var changes;\n    switch(type){\n        case SelectedItemClick:\n            changes = {\n                activeIndex: index\n            };\n            break;\n        case SelectedItemKeyDownNavigationPrevious:\n            changes = {\n                activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1\n            };\n            break;\n        case SelectedItemKeyDownNavigationNext:\n            changes = {\n                activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1\n            };\n            break;\n        case SelectedItemKeyDownBackspace:\n        case SelectedItemKeyDownDelete:\n            {\n                if (activeIndex < 0) {\n                    break;\n                }\n                var newActiveIndex = activeIndex;\n                if (selectedItems.length === 1) {\n                    newActiveIndex = -1;\n                } else if (activeIndex === selectedItems.length - 1) {\n                    newActiveIndex = selectedItems.length - 2;\n                }\n                changes = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n                    selectedItems: [].concat(selectedItems.slice(0, activeIndex), selectedItems.slice(activeIndex + 1))\n                }, {\n                    activeIndex: newActiveIndex\n                });\n                break;\n            }\n        case DropdownKeyDownNavigationPrevious:\n            changes = {\n                activeIndex: selectedItems.length - 1\n            };\n            break;\n        case DropdownKeyDownBackspace:\n            changes = {\n                selectedItems: selectedItems.slice(0, selectedItems.length - 1)\n            };\n            break;\n        case FunctionAddSelectedItem:\n            changes = {\n                selectedItems: [].concat(selectedItems, [\n                    selectedItem\n                ])\n            };\n            break;\n        case DropdownClick:\n            changes = {\n                activeIndex: -1\n            };\n            break;\n        case FunctionRemoveSelectedItem:\n            {\n                var _newActiveIndex = activeIndex;\n                var selectedItemIndex = selectedItems.indexOf(selectedItem);\n                if (selectedItemIndex < 0) {\n                    break;\n                }\n                if (selectedItems.length === 1) {\n                    _newActiveIndex = -1;\n                } else if (selectedItemIndex === selectedItems.length - 1) {\n                    _newActiveIndex = selectedItems.length - 2;\n                }\n                changes = {\n                    selectedItems: [].concat(selectedItems.slice(0, selectedItemIndex), selectedItems.slice(selectedItemIndex + 1)),\n                    activeIndex: _newActiveIndex\n                };\n                break;\n            }\n        case FunctionSetSelectedItems:\n            {\n                var newSelectedItems = action.selectedItems;\n                changes = {\n                    selectedItems: newSelectedItems\n                };\n                break;\n            }\n        case FunctionSetActiveIndex:\n            {\n                var _newActiveIndex2 = action.activeIndex;\n                changes = {\n                    activeIndex: _newActiveIndex2\n                };\n                break;\n            }\n        case FunctionReset:\n            changes = {\n                activeIndex: getDefaultValue(props, \"activeIndex\"),\n                selectedItems: getDefaultValue(props, \"selectedItems\")\n            };\n            break;\n        default:\n            throw new Error(\"Reducer called without proper action type.\");\n    }\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, state, changes);\n}\nvar _excluded = [\n    \"refKey\",\n    \"ref\",\n    \"onClick\",\n    \"onKeyDown\",\n    \"selectedItem\",\n    \"index\"\n], _excluded2 = [\n    \"refKey\",\n    \"ref\",\n    \"onKeyDown\",\n    \"onClick\",\n    \"preventKeyAction\"\n];\nuseMultipleSelection.stateChangeTypes = stateChangeTypes;\nfunction useMultipleSelection(userProps) {\n    if (userProps === void 0) {\n        userProps = {};\n    }\n    validatePropTypes(userProps, useMultipleSelection);\n    // Props defaults and destructuring.\n    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, defaultProps, userProps);\n    var getA11yRemovalMessage = props.getA11yRemovalMessage, itemToString = props.itemToString, environment = props.environment, keyNavigationNext = props.keyNavigationNext, keyNavigationPrevious = props.keyNavigationPrevious;\n    // Reducer init.\n    var _useControlledReducer = useControlledReducer$1(downshiftMultipleSelectionReducer, props, getInitialState), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];\n    var activeIndex = state.activeIndex, selectedItems = state.selectedItems;\n    // Refs.\n    var isInitialMountRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(true);\n    var dropdownRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null);\n    var previousSelectedItemsRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(selectedItems);\n    var selectedItemRefs = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)();\n    selectedItemRefs.current = [];\n    var latest = useLatestRef({\n        state: state,\n        props: props\n    });\n    // Effects.\n    /* Sets a11y status message on changes in selectedItem. */ (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (isInitialMountRef.current || false || !(environment != null && environment.document)) {\n            return;\n        }\n        if (selectedItems.length < previousSelectedItemsRef.current.length) {\n            var removedSelectedItem = previousSelectedItemsRef.current.find(function(item) {\n                return selectedItems.indexOf(item) < 0;\n            });\n            setStatus(getA11yRemovalMessage({\n                itemToString: itemToString,\n                resultCount: selectedItems.length,\n                removedSelectedItem: removedSelectedItem,\n                activeIndex: activeIndex,\n                activeSelectedItem: selectedItems[activeIndex]\n            }), environment.document);\n        }\n        previousSelectedItemsRef.current = selectedItems;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        selectedItems.length\n    ]);\n    // Sets focus on active item.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        if (isInitialMountRef.current) {\n            return;\n        }\n        if (activeIndex === -1 && dropdownRef.current) {\n            dropdownRef.current.focus();\n        } else if (selectedItemRefs.current[activeIndex]) {\n            selectedItemRefs.current[activeIndex].focus();\n        }\n    }, [\n        activeIndex\n    ]);\n    useControlPropsValidator({\n        isInitialMount: isInitialMountRef.current,\n        props: props,\n        state: state\n    });\n    var setGetterPropCallInfo = useGetterPropsCalledChecker(\"getDropdownProps\");\n    // Make initial ref false.\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(function() {\n        isInitialMountRef.current = false;\n        return function() {\n            isInitialMountRef.current = true;\n        };\n    }, []);\n    // Event handler functions.\n    var selectedItemKeyDownHandlers = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(function() {\n        var _ref;\n        return _ref = {}, _ref[keyNavigationPrevious] = function() {\n            dispatch({\n                type: SelectedItemKeyDownNavigationPrevious\n            });\n        }, _ref[keyNavigationNext] = function() {\n            dispatch({\n                type: SelectedItemKeyDownNavigationNext\n            });\n        }, _ref.Delete = function Delete() {\n            dispatch({\n                type: SelectedItemKeyDownDelete\n            });\n        }, _ref.Backspace = function Backspace() {\n            dispatch({\n                type: SelectedItemKeyDownBackspace\n            });\n        }, _ref;\n    }, [\n        dispatch,\n        keyNavigationNext,\n        keyNavigationPrevious\n    ]);\n    var dropdownKeyDownHandlers = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(function() {\n        var _ref2;\n        return _ref2 = {}, _ref2[keyNavigationPrevious] = function(event) {\n            if (isKeyDownOperationPermitted(event)) {\n                dispatch({\n                    type: DropdownKeyDownNavigationPrevious\n                });\n            }\n        }, _ref2.Backspace = function Backspace(event) {\n            if (isKeyDownOperationPermitted(event)) {\n                dispatch({\n                    type: DropdownKeyDownBackspace\n                });\n            }\n        }, _ref2;\n    }, [\n        dispatch,\n        keyNavigationPrevious\n    ]);\n    // Getter props.\n    var getSelectedItemProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp) {\n        var _extends2;\n        var _ref3 = _temp === void 0 ? {} : _temp, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? \"ref\" : _ref3$refKey, ref = _ref3.ref, onClick = _ref3.onClick, onKeyDown = _ref3.onKeyDown, selectedItemProp = _ref3.selectedItem, indexProp = _ref3.index, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref3, _excluded);\n        var latestState = latest.current.state;\n        var _getItemAndIndex = getItemAndIndex(selectedItemProp, indexProp, latestState.selectedItems, \"Pass either item or index to getSelectedItemProps!\"), index = _getItemAndIndex[1];\n        var isFocusable = index > -1 && index === latestState.activeIndex;\n        var selectedItemHandleClick = function selectedItemHandleClick() {\n            dispatch({\n                type: SelectedItemClick,\n                index: index\n            });\n        };\n        var selectedItemHandleKeyDown = function selectedItemHandleKeyDown(event) {\n            var key = normalizeArrowKey(event);\n            if (key && selectedItemKeyDownHandlers[key]) {\n                selectedItemKeyDownHandlers[key](event);\n            }\n        };\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function(selectedItemNode) {\n            if (selectedItemNode) {\n                selectedItemRefs.current.push(selectedItemNode);\n            }\n        }), _extends2.tabIndex = isFocusable ? 0 : -1, _extends2.onClick = callAllEventHandlers(onClick, selectedItemHandleClick), _extends2.onKeyDown = callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown), _extends2), rest);\n    }, [\n        dispatch,\n        latest,\n        selectedItemKeyDownHandlers\n    ]);\n    var getDropdownProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(_temp2, _temp3) {\n        var _extends3;\n        var _ref4 = _temp2 === void 0 ? {} : _temp2, _ref4$refKey = _ref4.refKey, refKey = _ref4$refKey === void 0 ? \"ref\" : _ref4$refKey, ref = _ref4.ref, onKeyDown = _ref4.onKeyDown, onClick = _ref4.onClick, _ref4$preventKeyActio = _ref4.preventKeyAction, preventKeyAction = _ref4$preventKeyActio === void 0 ? false : _ref4$preventKeyActio, rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref4, _excluded2);\n        var _ref5 = _temp3 === void 0 ? {} : _temp3, _ref5$suppressRefErro = _ref5.suppressRefError, suppressRefError = _ref5$suppressRefErro === void 0 ? false : _ref5$suppressRefErro;\n        setGetterPropCallInfo(\"getDropdownProps\", suppressRefError, refKey, dropdownRef);\n        var dropdownHandleKeyDown = function dropdownHandleKeyDown(event) {\n            var key = normalizeArrowKey(event);\n            if (key && dropdownKeyDownHandlers[key]) {\n                dropdownKeyDownHandlers[key](event);\n            }\n        };\n        var dropdownHandleClick = function dropdownHandleClick() {\n            dispatch({\n                type: DropdownClick\n            });\n        };\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function(dropdownNode) {\n            if (dropdownNode) {\n                dropdownRef.current = dropdownNode;\n            }\n        }), _extends3), !preventKeyAction && {\n            onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n            onClick: callAllEventHandlers(onClick, dropdownHandleClick)\n        }, rest);\n    }, [\n        dispatch,\n        dropdownKeyDownHandlers,\n        setGetterPropCallInfo\n    ]);\n    // returns\n    var addSelectedItem = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(selectedItem) {\n        dispatch({\n            type: FunctionAddSelectedItem,\n            selectedItem: selectedItem\n        });\n    }, [\n        dispatch\n    ]);\n    var removeSelectedItem = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(selectedItem) {\n        dispatch({\n            type: FunctionRemoveSelectedItem,\n            selectedItem: selectedItem\n        });\n    }, [\n        dispatch\n    ]);\n    var setSelectedItems = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(newSelectedItems) {\n        dispatch({\n            type: FunctionSetSelectedItems,\n            selectedItems: newSelectedItems\n        });\n    }, [\n        dispatch\n    ]);\n    var setActiveIndex = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function(newActiveIndex) {\n        dispatch({\n            type: FunctionSetActiveIndex,\n            activeIndex: newActiveIndex\n        });\n    }, [\n        dispatch\n    ]);\n    var reset = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(function() {\n        dispatch({\n            type: FunctionReset\n        });\n    }, [\n        dispatch\n    ]);\n    return {\n        getSelectedItemProps: getSelectedItemProps,\n        getDropdownProps: getDropdownProps,\n        addSelectedItem: addSelectedItem,\n        removeSelectedItem: removeSelectedItem,\n        setSelectedItems: setSelectedItems,\n        setActiveIndex: setActiveIndex,\n        reset: reset,\n        selectedItems: selectedItems,\n        activeIndex: activeIndex\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/downshift/dist/downshift.esm.js\n");

/***/ })

};
;